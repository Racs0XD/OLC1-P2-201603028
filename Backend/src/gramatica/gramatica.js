/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,18],$V1=[1,17],$V2=[1,19],$V3=[1,21],$V4=[1,22],$V5=[1,23],$V6=[1,24],$V7=[1,25],$V8=[1,20],$V9=[1,26],$Va=[2,5,19,20,36,38,39,40,41,42,43,44],$Vb=[2,17],$Vc=[1,34],$Vd=[1,35],$Ve=[1,36],$Vf=[1,37],$Vg=[2,43],$Vh=[20,22,34,35,38,39,40,41,42,43,44],$Vi=[2,35],$Vj=[1,42],$Vk=[1,62],$Vl=[1,48],$Vm=[1,49],$Vn=[1,50],$Vo=[1,53],$Vp=[1,54],$Vq=[1,46],$Vr=[1,47],$Vs=[1,51],$Vt=[1,52],$Vu=[1,55],$Vv=[1,56],$Vw=[1,57],$Vx=[1,58],$Vy=[1,59],$Vz=[1,60],$VA=[1,61],$VB=[1,63],$VC=[1,68],$VD=[1,73],$VE=[1,86],$VF=[1,87],$VG=[1,80],$VH=[1,81],$VI=[1,82],$VJ=[1,83],$VK=[1,84],$VL=[1,85],$VM=[1,88],$VN=[1,89],$VO=[1,90],$VP=[1,91],$VQ=[1,92],$VR=[1,93],$VS=[6,22,25,30,34,35,45,72,90,91,92,93,94,95,96,97,98,99,100,102],$VT=[1,119],$VU=[22,30],$VV=[6,22,25,30,45,72,99,100],$VW=[1,158],$VX=[22,25,30],$VY=[1,183],$VZ=[1,184],$V_=[1,187],$V$=[1,186],$V01=[1,188],$V11=[1,189],$V21=[1,190],$V31=[1,191],$V41=[1,192],$V51=[1,193],$V61=[1,194],$V71=[1,195],$V81=[6,22,25,30,34,35,45,72,90,91,96,97,98,99,100,102],$V91=[6,22,25,30,34,35,45,72,90,91,92,93,95,96,97,98,99,100,102],$Va1=[6,22,25,30,34,35,45,72,96,97,98,99,100,102],$Vb1=[2,22],$Vc1=[2,20,21,25,38,39,40,41,42,43,44,58,63,67,71,73,74,75,76,82,83,84],$Vd1=[1,234],$Ve1=[1,235],$Vf1=[1,236],$Vg1=[6,22],$Vh1=[2,6,20,21,22,25,30,34,35,38,39,40,41,42,43,44,45,58,63,67,71,72,73,74,75,76,82,83,84,90,91,92,93,94,95,96,97,98,99,100,102],$Vi1=[2,23],$Vj1=[2,5,19,20,21,25,36,38,39,40,41,42,43,44,58,63,67,71,73,74,75,76,82,83,84],$Vk1=[1,309],$Vl1=[1,308],$Vm1=[25,71,73],$Vn1=[1,340],$Vo1=[2,20,21,25,38,39,40,41,42,43,44,58,63,64,67,71,73,74,75,76,82,83,84];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"OPCIONESCUERPO":4,"EOF":5,"ptcoma":6,"CUERPO":7,"DEC_VAR":8,"ASIG_VAR":9,"METODOS":10,"FUNCIONES":11,"MAIN":12,"DEC_VECTOR":13,"ASIG_VECTOR":14,"DEC_LISTA":15,"ADD_LISTA":16,"ACCEDER_LISTA":17,"CHARARRAY":18,"Rvoid":19,"identificador":20,"parA":21,"parC":22,"llaveA":23,"INSTRUCCIONES":24,"llaveC":25,"LPARAMETROS":26,"LLAMADAMETODO":27,"LISTAVALORES":28,"LLAMADAFUNCION":29,"coma":30,"EXPRESION":31,"TIPO":32,"PARAMETROS":33,"menor":34,"mayor":35,"Rmain":36,"igual":37,"Rint":38,"Rdouble":39,"Rchar":40,"Rboolean":41,"Rstring":42,"Rlist":43,"corA":44,"corC":45,"INSTRUCCION":46,"PRINT":47,"CASTEO":48,"IF":49,"SWITCH":50,"WHILE":51,"DOWHILE":52,"FOR":53,"BREAK":54,"CONTINUE":55,"RETURN":56,"INSTRUCCIONFOR":57,"Rprint":58,"Rnew":59,"punto":60,"Radd":61,"Rtochararray":62,"Rif":63,"Relse":64,"ELSEIFS":65,"CONELSEIF":66,"Rswitch":67,"CSWITCH":68,"DEF":69,"CONSWITCH":70,"Rcase":71,"dospuntos":72,"Rdefault":73,"Rwhile":74,"Rdo":75,"Rfor":76,"CUERPOFOR":77,"INCREMENTO":78,"DECREMENTO":79,"masmas":80,"menosmenos":81,"Rbreak":82,"Rcontinue":83,"Rreturn":84,"VAL_CAST":85,"decimal":86,"entero":87,"string":88,"char":89,"suma":90,"menos":91,"multi":92,"div":93,"exponente":94,"modulo":95,"menorIgual":96,"mayorIgual":97,"diferente":98,"and":99,"or":100,"not":101,"igualigual":102,"Rtrue":103,"Rfalse":104,"Rtoupper":105,"Rtolower":106,"Rlength":107,"Rtruncate":108,"Rround":109,"Rtypeof":110,"Rtostring":111,"Rgetvalue":112,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",6:"ptcoma",19:"Rvoid",20:"identificador",21:"parA",22:"parC",23:"llaveA",25:"llaveC",30:"coma",34:"menor",35:"mayor",36:"Rmain",37:"igual",38:"Rint",39:"Rdouble",40:"Rchar",41:"Rboolean",42:"Rstring",43:"Rlist",44:"corA",45:"corC",58:"Rprint",59:"Rnew",60:"punto",61:"Radd",62:"Rtochararray",63:"Rif",64:"Relse",67:"Rswitch",71:"Rcase",72:"dospuntos",73:"Rdefault",74:"Rwhile",75:"Rdo",76:"Rfor",80:"masmas",81:"menosmenos",82:"Rbreak",83:"Rcontinue",84:"Rreturn",86:"decimal",87:"entero",88:"string",89:"char",90:"suma",91:"menos",92:"multi",93:"div",94:"exponente",95:"modulo",96:"menorIgual",97:"mayorIgual",98:"diferente",99:"and",100:"or",101:"not",102:"igualigual",103:"Rtrue",104:"Rfalse",105:"Rtoupper",106:"Rtolower",107:"Rlength",108:"Rtruncate",109:"Rround",110:"Rtypeof",111:"Rtostring",112:"Rgetvalue"},
productions_: [0,[3,2],[3,2],[3,0],[4,2],[4,1],[7,2],[7,2],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[10,7],[10,8],[27,4],[27,5],[29,3],[29,4],[28,3],[28,1],[11,7],[11,8],[26,3],[26,1],[33,2],[33,5],[33,3],[12,5],[12,6],[8,2],[8,4],[9,3],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,2],[24,2],[24,1],[46,1],[46,1],[46,2],[46,2],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,2],[46,2],[47,5],[13,11],[13,9],[14,7],[15,12],[16,7],[17,6],[18,11],[49,7],[49,11],[49,8],[49,12],[65,2],[65,1],[66,8],[50,8],[50,7],[50,7],[68,2],[68,1],[70,4],[69,3],[51,7],[52,9],[52,8],[53,11],[53,10],[77,1],[77,1],[57,1],[57,1],[78,2],[79,2],[54,2],[55,2],[56,2],[56,3],[48,4],[85,1],[85,1],[85,1],[85,1],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,2],[31,2],[31,3],[31,3],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,4],[31,4],[31,4],[31,4],[31,4],[31,4],[31,4],[31,4],[31,6],[31,1],[31,1],[31,1],[31,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
respuesta.err = ""; respuesta.LIns = $$[$0-1]; return respuesta;
break;
case 2:
  respuesta.err  =  "Tipo de Error: Sintactico, Descirpcion: Se encontro "+ $$[$0-2] + " se esperaba "+$$[$0-1] +", Linea: "  + (this._$.first_line-1) + ", Columna: " + this._$.first_column ; return respuesta; 
break;
case 4: case 87:
$$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 5: case 29: case 82: case 88:
this.$=[$$[$0]];
break;
case 6: case 7: case 50:
this.$=$$[$0-1];
break;
case 8: case 9: case 10: case 48: case 51: case 96: case 97:
this.$=$$[$0];
break;
case 11: case 12: case 13: case 14: case 15: case 16: case 47: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 59: case 60: case 61: case 62: case 63: case 64: case 65: case 66: case 98: case 99: case 144: case 145: case 146:
this.$=$$[$0]
break;
case 17:
 respuesta.err  =  "Tipo de Error: Sintactico, Descirpcion: Se encontro "+ $$[$0-1] + " se esperaba "+$$[$0] +", Linea: "  + (this._$.first_line-1) + ", Columna: " + this._$.first_column ; return respuesta; 
break;
case 18:
this.$ = INSTRUCCION.nuevoMetodo($$[$0-5], null, $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 19:
this.$ = INSTRUCCION.nuevoMetodo($$[$0-6], $$[$0-4], $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 20:
this.$ = INSTRUCCION.nuevaLlamada($$[$0-3], null, this._$.first_line,this._$.first_column+1)
break;
case 21:
this.$ = INSTRUCCION.nuevaLlamada($$[$0-4], $$[$0-2], this._$.first_line,this._$.first_column+1)
break;
case 22:
this.$ = INSTRUCCION.nuevaLlamadaFuncion($$[$0-2], null, this._$.first_line,this._$.first_column+1)
break;
case 23:
this.$ = INSTRUCCION.nuevaLlamadaFuncion($$[$0-3], $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 24:
$$[$0-2].push($$[$0]); this.$=$$[$0-2]
break;
case 25:
this.$=[$$[$0]]
break;
case 26:
this.$ = INSTRUCCION.nuevaFuncion($$[$0-6], $$[$0-5], null, $$[$0-1], $$[$0], this._$.first_line,this._$.first_column+1)
break;
case 27:
this.$ = INSTRUCCION.nuevaFuncion($$[$0-7], $$[$0-6], $$[$0-4], $$[$0-1], $$[$0], this._$.first_line,this._$.first_column+1)
break;
case 28:
$$[$0-2].push($$[$0]); this.$=$$[$0-2];
break;
case 30: case 32:
this.$ = INSTRUCCION.nuevaDeclaracion($$[$0], null, $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 31:
this.$ = INSTRUCCION.nuevaDeclaracion($$[$0], null, $$[$0-4], this._$.first_line,this._$.first_column+1)
break;
case 33:
this.$ = INSTRUCCION.nuevoMain($$[$0-3], null, this._$.first_line,this._$.first_column+1)
break;
case 34:
this.$ = INSTRUCCION.nuevoMain($$[$0-4], $$[$0-2], this._$.first_line,this._$.first_column+1)
break;
case 35:
this.$= INSTRUCCION.nuevaDeclaracion($$[$0],null, $$[$0-1],this._$.first_line, this._$.first_column+1)
break;
case 36:
this.$= INSTRUCCION.nuevaDeclaracion($$[$0-2], $$[$0], $$[$0-3],this._$.first_line, this._$.first_column+1)
break;
case 37:
this.$ = INSTRUCCION.nuevaAsignacion($$[$0-2], $$[$0],this._$.first_line, this._$.first_column+1)
break;
case 38:
this.$= TIPO_DATO.ENTERO
break;
case 39:
this.$= TIPO_DATO.DECIMAL
break;
case 40:
this.$= TIPO_DATO.CHAR
break;
case 41:
this.$= TIPO_DATO.BOOL
break;
case 42:
this.$= TIPO_DATO.CADENA
break;
case 43:
this.$ = TIPO_DATO.LISTA
break;
case 44:
this.$ = TIPO_DATO.VECTOR
break;
case 45:
this.$ = $$[$0-1]; $$[$0-1].push($$[$0]);
break;
case 46:
this.$ = [$$[$0]];
break;
case 49: case 67: case 126:
this.$=$$[$0-1]
break;
case 68:
 respuesta.err  =  "Tipo de Error: Sintactico, Descirpcion: Se encontro "+ $$[$0-2] + " se esperaba "+$$[$0-1] +", Linea: "  + (this._$.first_line-1) + ", Columna: " + this._$.first_column ; return respuesta; 
break;
case 69:
this.$ = INSTRUCCION.nuevoPrint($$[$0-2], this._$.first_line,this._$.first_column+1)
break;
case 70:
this.$ = INSTRUCCION.nuevaDeclaracionVector($$[$0-10],$$[$0-7],$$[$0-4],$$[$0-2],this._$.first_line,this._$.first_column+1)
break;
case 71:
this.$ = INSTRUCCION.nuevaDeclaracionVector($$[$0-8],$$[$0-5],null,$$[$0-2],this._$.first_line,this._$.first_column+1)
break;
case 72:
this.$ = INSTRUCCION.nuevaAsignacionVector($$[$0-6], $$[$0-4], $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 73:
this.$ = INSTRUCCION.nuevaDeclaracionLista($$[$0-9],$$[$0-7],$$[$0-2],this._$.first_line,this._$.first_column+1)
break;
case 74:
this.$ = INSTRUCCION.nuevaAsignacionLista($$[$0-6], $$[$0-2], this._$.first_line,this._$.first_column+1)
break;
case 75:
this.$ = INSTRUCCION.nuevoAccesoLista($$[$0-5], $$[$0-2], this._$.first_line,this._$.first_column+1)
break;
case 76:
this.$ = INSTRUCCION.nuevoCharArray($$[$0-8], $$[$0-6], $$[$0-2], this._$.first_line,this._$.first_column+1)
break;
case 77:
this.$ = new INSTRUCCION.nuevoIf($$[$0-4], $$[$0-1] , this._$.first_line,this._$.first_column+1)
break;
case 78:
this.$ = new INSTRUCCION.nuevoIfElse($$[$0-8], $$[$0-5], $$[$0-1] , this._$.first_line,this._$.first_column+1)
break;
case 79:
this.$ = new INSTRUCCION.nuevoIfElseIf($$[$0-5], $$[$0-2],$$[$0],null,this._$.first_line, this._$.first_column+1)
break;
case 80:
this.$ = new INSTRUCCION.nuevoIfElseIf($$[$0-9], $$[$0-6],$$[$0-4],$$[$0-1],this._$.first_line, this._$.first_column+1)
break;
case 81:
$$[$0-1].push($$[$0]); this.$=$$[$0-1]
break;
case 83:
this.$ = new INSTRUCCION.nuevoElseIf($$[$0-4], $$[$0-1],this._$.first_line, this._$.first_column+1)
break;
case 84:
this.$= new INSTRUCCION.nuevoSwitch($$[$0-5], $$[$0-2], $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 85:
this.$= new INSTRUCCION.nuevoSwitch($$[$0-4], $$[$0-1], null, this._$.first_line,this._$.first_column+1)
break;
case 86:
this.$= new INSTRUCCION.nuevoSwitch($$[$0-4], null, $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 89:
this.$ = new INSTRUCCION.nuevoCase($$[$0-2], $$[$0] , this._$.first_line,this._$.first_column+1) 
break;
case 90:
this.$ = $$[$0]
break;
case 91:
this.$ = new INSTRUCCION.nuevoWhile($$[$0-4], $$[$0-1] , this._$.first_line,this._$.first_column+1)
break;
case 92:
this.$ = new INSTRUCCION.nuevoDoWhile($$[$0-2], $$[$0-6] , this._$.first_line,this._$.first_column+1)
break;
case 93:
this.$ = new INSTRUCCION.nuevoDoWhile($$[$0-2], [] , this._$.first_line,(this._$.first_column+1));
break;
case 94:
this.$ = new INSTRUCCION.nuevoFor($$[$0-8], $$[$0-6], $$[$0-4], $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 95:
this.$ = new INSTRUCCION.nuevoFor($$[$0-7], $$[$0-5], $$[$0-3], $$[$0], this._$.first_line,this._$.first_column+1)
break;
case 100:
this.$= INSTRUCCION.nuevoIncremento($$[$0-1],this._$.first_line,this._$.first_column+1)
break;
case 101:
this.$= INSTRUCCION.nuevoDecremento($$[$0-1],this._$.first_line,this._$.first_column+1)
break;
case 102:
this.$ = new INSTRUCCION.nuevoBreak(this._$.first_line,this._$.first_column+1)
break;
case 103:
this.$ = new INSTRUCCION.nuevoContinue(this._$.first_line,this._$.first_column+1)
break;
case 104:
this.$ = new INSTRUCCION.nuevoReturn(this._$.first_line,this._$.first_column+1)
break;
case 105:
this.$ = new INSTRUCCION.nuevoReturn($$[$0-1],this._$.first_line,this._$.first_column+1)
break;
case 106:
this.$= INSTRUCCION.nuevoCasteo($$[$0-2],$$[$0],this._$.first_line, this._$.first_column+1);
break;
case 107: case 128:
this.$= INSTRUCCION.nuevoValor(Number($$[$0]),TIPO_VALOR.DECIMAL,this._$.first_line, this._$.first_column+1);
break;
case 108: case 129:
this.$= INSTRUCCION.nuevoValor(Number($$[$0]),TIPO_VALOR.ENTERO,this._$.first_line, this._$.first_column+1);
break;
case 109: case 132:
this.$= INSTRUCCION.nuevoValor($$[$0],TIPO_VALOR.CADENA,this._$.first_line, this._$.first_column+1);
break;
case 110: case 133:
this.$= INSTRUCCION.nuevoValor($$[$0],TIPO_VALOR.CHAR,this._$.first_line, this._$.first_column+1);
break;
case 111:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.SUMA,this._$.first_line, this._$.first_column+1);
break;
case 112:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.RESTA,this._$.first_line, this._$.first_column+1);
break;
case 113:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MULTIPLICACION,this._$.first_line, this._$.first_column+1);
break;
case 114:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.DIVISION,this._$.first_line, this._$.first_column+1);
break;
case 115:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.POTENCIA,this._$.first_line, this._$.first_column+1);
break;
case 116:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MODULO,this._$.first_line, this._$.first_column+1);
break;
case 117:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MENOR,this._$.first_line, this._$.first_column+1);
break;
case 118:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MAYOR,this._$.first_line, this._$.first_column+1);
break;
case 119:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MENORIGUAL,this._$.first_line, this._$.first_column+1);
break;
case 120:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MAYORIGUAL,this._$.first_line, this._$.first_column+1);
break;
case 121:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.DIFERENTE,this._$.first_line, this._$.first_column+1);
break;
case 122:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.AND,this._$.first_line, this._$.first_column+1);
break;
case 123:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.OR,this._$.first_line, this._$.first_column+1);
break;
case 124:
this.$= INSTRUCCION.nuevaOperacionUnaria($$[$0], TIPO_OPERACION.UNARIA,this._$.first_line, this._$.first_column+1);
break;
case 125:
this.$= INSTRUCCION.nuevaOperacionBinaria(null,$$[$0], TIPO_OPERACION.NOT,this._$.first_line, this._$.first_column+1);
break;
case 127:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.IGUALIGUAL,this._$.first_line, this._$.first_column+1);
break;
case 130: case 131:
this.$= INSTRUCCION.nuevoValor($$[$0],TIPO_VALOR.BOOL,this._$.first_line, this._$.first_column+1);
break;
case 134:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-1],$$[$0-1], TIPO_OPERACION.TOUPPER,this._$.first_line,this._$.first_column+1);
break;
case 135:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-1],$$[$0-1], TIPO_OPERACION.TOLOWER,this._$.first_line,this._$.first_column+1);
break;
case 136:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-1],$$[$0-1], TIPO_OPERACION.LENGTH,this._$.first_line,this._$.first_column+1);
break;
case 137:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-1],$$[$0-1], TIPO_OPERACION.TRUNCATE,this._$.first_line,this._$.first_column+1);
break;
case 138:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-1],$$[$0-1], TIPO_OPERACION.ROUND,this._$.first_line,this._$.first_column+1);
break;
case 139:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-1],$$[$0-1], TIPO_OPERACION.TYPEOF,this._$.first_line,this._$.first_column+1);
break;
case 140:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-1],$$[$0-1], TIPO_OPERACION.TOSTRING,this._$.first_line,this._$.first_column+1);
break;
case 141:
this.$ = INSTRUCCION.nuevoValorVector($$[$0-3],$$[$0-1], TIPO_VALOR.VECTOR, this._$.first_line,this._$.first_column+1)
break;
case 142:
this.$ = INSTRUCCION.nuevoValorLista($$[$0-3],$$[$0-1], TIPO_VALOR.LISTA, this._$.first_line,this._$.first_column+1)
break;
case 143:
this.$= INSTRUCCION.nuevoValor($$[$0],TIPO_VALOR.IDENTIFICADOR,this._$.first_line, this._$.first_column+1);
break;
}
},
table: [{1:[2,3],2:[1,3],3:1,4:2,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V0,20:$V1,32:16,36:$V2,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9},{1:[3]},{2:[1,29],5:[1,27],7:28,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V0,20:$V1,32:16,36:$V2,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9},o($Va,$Vb,{6:[1,30]}),o($Va,[2,5]),{6:[1,31]},{6:[1,32]},o($Va,[2,8]),o($Va,[2,9]),o($Va,[2,10]),o($Va,[2,11]),o($Va,[2,12]),o($Va,[2,13]),o($Va,[2,14]),o($Va,[2,15]),o($Va,[2,16]),{20:[1,33],44:$Vc},{37:$Vd,44:$Ve,60:$Vf},{20:[1,38]},{20:[1,39]},o([20,44],$Vg,{34:[1,40]}),o($Vh,[2,38]),o($Vh,[2,39]),o($Vh,[2,40]),o($Vh,[2,41]),o($Vh,[2,42]),{45:[1,41]},{1:[2,1]},o($Va,[2,4]),o($Va,$Vb),{1:[2,2]},o($Va,[2,6]),o($Va,[2,7]),{6:$Vi,21:[1,43],37:$Vj},{45:[1,44]},{17:65,20:$Vk,21:$Vl,29:64,31:45,48:66,86:$Vm,87:$Vn,88:$Vo,89:$Vp,91:$Vq,101:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA,112:$VB},{17:65,20:$Vk,21:$Vl,29:64,31:67,44:$VC,48:66,86:$Vm,87:$Vn,88:$Vo,89:$Vp,91:$Vq,101:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA,112:$VB},{61:[1,69]},{21:[1,70]},{21:[1,71]},{32:72,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$VD,44:$V9},o($Vh,[2,44]),{17:65,20:$Vk,21:$Vl,29:64,31:74,48:66,86:$Vm,87:$Vn,88:$Vo,89:$Vp,91:$Vq,101:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA,112:$VB},{22:[1,75],26:76,32:78,33:77,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$VD,44:$V9},{20:[1,79]},{6:[2,37],34:$VE,35:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,102:$VR},{17:65,20:$Vk,21:$Vl,29:64,31:94,48:66,86:$Vm,87:$Vn,88:$Vo,89:$Vp,91:$Vq,101:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA,112:$VB},{17:65,20:$Vk,21:$Vl,29:64,31:95,48:66,86:$Vm,87:$Vn,88:$Vo,89:$Vp,91:$Vq,101:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA,112:$VB},{17:65,20:$Vk,21:$Vl,29:64,31:96,32:97,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$VD,44:$V9,48:66,86:$Vm,87:$Vn,88:$Vo,89:$Vp,91:$Vq,101:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA,112:$VB},o($VS,[2,128]),o($VS,[2,129]),o($VS,[2,130]),o($VS,[2,131]),o($VS,[2,132]),o($VS,[2,133]),{21:[1,98]},{21:[1,99]},{21:[1,100]},{21:[1,101]},{21:[1,102]},{21:[1,103]},{21:[1,104]},o($VS,[2,143],{21:[1,106],44:[1,105]}),{21:[1,107]},o($VS,[2,144]),o($VS,[2,145]),o($VS,[2,146]),{34:$VE,35:$VF,45:[1,108],90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,102:$VR},{17:65,20:$Vk,21:$Vl,29:64,31:109,48:66,86:$Vm,87:$Vn,88:$Vo,89:$Vp,91:$Vq,101:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA,112:$VB},{21:[1,110]},{22:[1,111],26:112,32:78,33:77,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$VD,44:$V9},{17:65,20:$Vk,21:$Vl,22:[1,113],28:114,29:64,31:115,48:66,86:$Vm,87:$Vn,88:$Vo,89:$Vp,91:$Vq,101:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA,112:$VB},{35:[1,116]},o($Vh,$Vg),{6:[2,36],34:$VE,35:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,102:$VR},{23:[1,117]},{22:[1,118],30:$VT},o($VU,[2,29]),{20:[1,120],32:122,34:[1,121],38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$VD,44:$V9},{37:[1,123]},{17:65,20:$Vk,21:$Vl,29:64,31:124,48:66,86:$Vm,87:$Vn,88:$Vo,89:$Vp,91:$Vq,101:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA,112:$VB},{17:65,20:$Vk,21:$Vl,29:64,31:125,48:66,86:$Vm,87:$Vn,88:$Vo,89:$Vp,91:$Vq,101:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA,112:$VB},{17:65,20:$Vk,21:$Vl,29:64,31:126,48:66,86:$Vm,87:$Vn,88:$Vo,89:$Vp,91:$Vq,101:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA,112:$VB},{17:65,20:$Vk,21:$Vl,29:64,31:127,48:66,86:$Vm,87:$Vn,88:$Vo,89:$Vp,91:$Vq,101:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA,112:$VB},{17:65,20:$Vk,21:$Vl,29:64,31:128,48:66,86:$Vm,87:$Vn,88:$Vo,89:$Vp,91:$Vq,101:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA,112:$VB},{17:65,20:$Vk,21:$Vl,29:64,31:129,48:66,86:$Vm,87:$Vn,88:$Vo,89:$Vp,91:$Vq,101:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA,112:$VB},{17:65,20:$Vk,21:$Vl,29:64,31:130,48:66,86:$Vm,87:$Vn,88:$Vo,89:$Vp,91:$Vq,101:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA,112:$VB},{17:65,20:$Vk,21:$Vl,29:64,31:131,48:66,86:$Vm,87:$Vn,88:$Vo,89:$Vp,91:$Vq,101:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA,112:$VB},{17:65,20:$Vk,21:$Vl,29:64,31:132,48:66,86:$Vm,87:$Vn,88:$Vo,89:$Vp,91:$Vq,101:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA,112:$VB},{17:65,20:$Vk,21:$Vl,29:64,31:133,48:66,86:$Vm,87:$Vn,88:$Vo,89:$Vp,91:$Vq,101:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA,112:$VB},{17:65,20:$Vk,21:$Vl,29:64,31:134,48:66,86:$Vm,87:$Vn,88:$Vo,89:$Vp,91:$Vq,101:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA,112:$VB},{17:65,20:$Vk,21:$Vl,29:64,31:135,48:66,86:$Vm,87:$Vn,88:$Vo,89:$Vp,91:$Vq,101:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA,112:$VB},{17:65,20:$Vk,21:$Vl,29:64,31:136,48:66,86:$Vm,87:$Vn,88:$Vo,89:$Vp,91:$Vq,101:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA,112:$VB},{17:65,20:$Vk,21:$Vl,29:64,31:137,48:66,86:$Vm,87:$Vn,88:$Vo,89:$Vp,91:$Vq,101:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA,112:$VB},o($VS,[2,124]),o($VV,[2,125],{34:$VE,35:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN,98:$VO,102:$VR}),{22:[1,138],34:$VE,35:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,102:$VR},{22:[1,139]},{17:65,20:$Vk,21:$Vl,29:64,31:140,48:66,86:$Vm,87:$Vn,88:$Vo,89:$Vp,91:$Vq,101:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA,112:$VB},{17:65,20:$Vk,21:$Vl,29:64,31:141,48:66,86:$Vm,87:$Vn,88:$Vo,89:$Vp,91:$Vq,101:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA,112:$VB},{17:65,20:$Vk,21:$Vl,29:64,31:142,48:66,86:$Vm,87:$Vn,88:$Vo,89:$Vp,91:$Vq,101:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA,112:$VB},{17:65,20:$Vk,21:$Vl,29:64,31:143,48:66,86:$Vm,87:$Vn,88:$Vo,89:$Vp,91:$Vq,101:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA,112:$VB},{17:65,20:$Vk,21:$Vl,29:64,31:144,48:66,86:$Vm,87:$Vn,88:$Vo,89:$Vp,91:$Vq,101:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA,112:$VB},{17:65,20:$Vk,21:$Vl,29:64,31:145,48:66,86:$Vm,87:$Vn,88:$Vo,89:$Vp,91:$Vq,101:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA,112:$VB},{17:65,20:$Vk,21:$Vl,29:64,31:146,48:66,86:$Vm,87:$Vn,88:$Vo,89:$Vp,91:$Vq,101:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA,112:$VB},{17:65,20:$Vk,21:$Vl,29:64,31:147,44:$VC,48:66,86:$Vm,87:$Vn,88:$Vo,89:$Vp,91:$Vq,101:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA,112:$VB},{17:65,20:$Vk,21:$Vl,22:[1,148],28:149,29:64,31:115,48:66,86:$Vm,87:$Vn,88:$Vo,89:$Vp,91:$Vq,101:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA,112:$VB},{20:[1,150]},{37:[1,151]},{34:$VE,35:$VF,45:[1,152],90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,102:$VR},{17:65,20:$Vk,21:$Vl,29:64,31:153,48:66,86:$Vm,87:$Vn,88:$Vo,89:$Vp,91:$Vq,101:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA,112:$VB},{23:[1,154]},{22:[1,155],30:$VT},{6:[1,156]},{22:[1,157],30:$VW},o($VX,[2,25],{34:$VE,35:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,102:$VR}),{20:[1,159]},{2:$VY,8:164,9:165,13:167,14:168,15:169,16:170,17:171,18:172,20:$VZ,21:$V_,24:160,27:163,29:162,32:185,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,46:161,47:166,48:173,49:174,50:175,51:176,52:177,53:178,54:179,55:180,56:181,57:182,58:$V$,63:$V01,67:$V11,74:$V21,75:$V31,76:$V41,78:196,79:197,82:$V51,83:$V61,84:$V71},{23:[1,198]},{32:78,33:199,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$VD,44:$V9},o($VU,[2,30]),{32:200,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$VD,44:$V9},{20:[1,201]},{23:[1,203],59:[1,202]},o($V81,[2,111],{92:$VI,93:$VJ,94:$VK,95:$VL}),o($V81,[2,112],{92:$VI,93:$VJ,94:$VK,95:$VL}),o($V91,[2,113],{94:$VK}),o($V91,[2,114],{94:$VK}),o($V91,[2,115]),o($V91,[2,116],{94:$VK}),o($Va1,[2,117],{90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL}),o($Va1,[2,118],{90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL}),o($Va1,[2,119],{90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL}),o($Va1,[2,120],{90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL}),o($Va1,[2,121],{90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL}),o($VV,[2,122],{34:$VE,35:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN,98:$VO,102:$VR}),o([6,22,25,30,45,72,100],[2,123],{34:$VE,35:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,102:$VR}),o($Va1,[2,127],{90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL}),o($VS,[2,126]),{85:204,86:[1,205],87:[1,206],88:[1,207],89:[1,208]},{22:[1,209],34:$VE,35:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,102:$VR},{22:[1,210],34:$VE,35:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,102:$VR},{22:[1,211],34:$VE,35:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,102:$VR},{22:[1,212],34:$VE,35:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,102:$VR},{22:[1,213],34:$VE,35:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,102:$VR},{22:[1,214],34:$VE,35:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,102:$VR},{22:[1,215],34:$VE,35:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,102:$VR},{34:$VE,35:$VF,45:[1,216],90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,102:$VR},o($VS,$Vb1),{22:[1,217],30:$VW},{30:[1,218]},{17:65,20:$Vk,21:$Vl,29:64,31:219,48:66,86:$Vm,87:$Vn,88:$Vo,89:$Vp,91:$Vq,101:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA,112:$VB},{45:[1,220]},{22:[1,221],34:$VE,35:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,102:$VR},{2:$VY,8:164,9:165,13:167,14:168,15:169,16:170,17:171,18:172,20:$VZ,21:$V_,24:222,27:163,29:162,32:185,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,46:161,47:166,48:173,49:174,50:175,51:176,52:177,53:178,54:179,55:180,56:181,57:182,58:$V$,63:$V01,67:$V11,74:$V21,75:$V31,76:$V41,78:196,79:197,82:$V51,83:$V61,84:$V71},{23:[1,223]},o($Va,[2,33]),{6:[1,224]},{17:65,20:$Vk,21:$Vl,29:64,31:225,48:66,86:$Vm,87:$Vn,88:$Vo,89:$Vp,91:$Vq,101:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA,112:$VB},{37:[1,226]},{2:$VY,8:164,9:165,13:167,14:168,15:169,16:170,17:171,18:172,20:$VZ,21:$V_,25:[1,227],27:163,29:162,32:185,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,46:228,47:166,48:173,49:174,50:175,51:176,52:177,53:178,54:179,55:180,56:181,57:182,58:$V$,63:$V01,67:$V11,74:$V21,75:$V31,76:$V41,78:196,79:197,82:$V51,83:$V61,84:$V71},o($Vc1,[2,46]),o($Vc1,[2,47]),o($Vc1,[2,48]),{6:[1,229]},{6:[1,230]},o($Vc1,[2,51]),o($Vc1,[2,52]),o($Vc1,[2,53]),o($Vc1,[2,54]),o($Vc1,[2,55]),o($Vc1,[2,56]),o($Vc1,[2,57]),o($Vc1,[2,58]),o($Vc1,[2,59]),o($Vc1,[2,60]),o($Vc1,[2,61]),o($Vc1,[2,62]),o($Vc1,[2,63]),o($Vc1,[2,64]),o($Vc1,[2,65]),o($Vc1,[2,66]),{6:[1,231]},{6:[1,232]},{21:[1,233],37:$Vd,44:$Ve,60:$Vf,80:$Vd1,81:$Ve1},{20:$Vf1,44:$Vc},{21:[1,237]},{32:97,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$VD,44:$V9},{21:[1,238]},{21:[1,239]},{21:[1,240]},{23:[1,241]},{21:[1,242]},{6:[1,243]},{6:[1,244]},{6:[1,245],17:65,20:$Vk,21:$Vl,29:64,31:246,48:66,86:$Vm,87:$Vn,88:$Vo,89:$Vp,91:$Vq,101:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA,112:$VB},o($Vg1,[2,98]),o($Vg1,[2,99]),{2:$VY,8:164,9:165,13:167,14:168,15:169,16:170,17:171,18:172,20:$VZ,21:$V_,24:247,27:163,29:162,32:185,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,46:161,47:166,48:173,49:174,50:175,51:176,52:177,53:178,54:179,55:180,56:181,57:182,58:$V$,63:$V01,67:$V11,74:$V21,75:$V31,76:$V41,78:196,79:197,82:$V51,83:$V61,84:$V71},o($VU,[2,28]),{35:[1,248]},o($VU,[2,32]),{32:249,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$VD,44:$V9},{17:65,20:$Vk,21:$Vl,28:250,29:64,31:115,48:66,86:$Vm,87:$Vn,88:$Vo,89:$Vp,91:$Vq,101:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA,112:$VB},o($Vh1,[2,106]),o($Vh1,[2,107]),o($Vh1,[2,108]),o($Vh1,[2,109]),o($Vh1,[2,110]),o($VS,[2,134]),o($VS,[2,135]),o($VS,[2,136]),o($VS,[2,137]),o($VS,[2,138]),o($VS,[2,139]),o($VS,[2,140]),o($VS,[2,141]),o($VS,$Vi1),{17:65,20:$Vk,21:$Vl,29:64,31:251,48:66,86:$Vm,87:$Vn,88:$Vo,89:$Vp,91:$Vq,101:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA,112:$VB},{6:[1,252],34:$VE,35:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,102:$VR},o([2,5,6,19,20,21,22,25,30,34,35,36,38,39,40,41,42,43,44,45,58,63,67,71,72,73,74,75,76,82,83,84,90,91,92,93,94,95,96,97,98,99,100,102],[2,75]),{6:[1,253]},{2:$VY,8:164,9:165,13:167,14:168,15:169,16:170,17:171,18:172,20:$VZ,21:$V_,25:[1,254],27:163,29:162,32:185,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,46:228,47:166,48:173,49:174,50:175,51:176,52:177,53:178,54:179,55:180,56:181,57:182,58:$V$,63:$V01,67:$V11,74:$V21,75:$V31,76:$V41,78:196,79:197,82:$V51,83:$V61,84:$V71},{2:$VY,8:164,9:165,13:167,14:168,15:169,16:170,17:171,18:172,20:$VZ,21:$V_,24:255,27:163,29:162,32:185,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,46:161,47:166,48:173,49:174,50:175,51:176,52:177,53:178,54:179,55:180,56:181,57:182,58:$V$,63:$V01,67:$V11,74:$V21,75:$V31,76:$V41,78:196,79:197,82:$V51,83:$V61,84:$V71},o($Va,[2,34]),o($VX,[2,24],{34:$VE,35:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,102:$VR}),{59:[1,256],62:[1,257]},o($Va,[2,26]),o($Vc1,[2,45]),o($Vc1,[2,49]),o($Vc1,[2,50]),o($Vc1,[2,67]),o($Vc1,[2,68]),{17:65,20:$Vk,21:$Vl,22:[1,258],28:259,29:64,31:115,48:66,86:$Vm,87:$Vn,88:$Vo,89:$Vp,91:$Vq,101:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA,112:$VB},o($Vg1,[2,100]),o($Vg1,[2,101]),{6:$Vi,37:$Vj},{17:65,20:$Vk,21:$Vl,29:64,31:260,48:66,86:$Vm,87:$Vn,88:$Vo,89:$Vp,91:$Vq,101:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA,112:$VB},{17:65,20:$Vk,21:$Vl,29:64,31:261,48:66,86:$Vm,87:$Vn,88:$Vo,89:$Vp,91:$Vq,101:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA,112:$VB},{17:65,20:$Vk,21:$Vl,29:64,31:262,48:66,86:$Vm,87:$Vn,88:$Vo,89:$Vp,91:$Vq,101:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA,112:$VB},{17:65,20:$Vk,21:$Vl,29:64,31:263,48:66,86:$Vm,87:$Vn,88:$Vo,89:$Vp,91:$Vq,101:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA,112:$VB},{2:$VY,8:164,9:165,13:167,14:168,15:169,16:170,17:171,18:172,20:$VZ,21:$V_,24:264,25:[1,265],27:163,29:162,32:185,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,46:161,47:166,48:173,49:174,50:175,51:176,52:177,53:178,54:179,55:180,56:181,57:182,58:$V$,63:$V01,67:$V11,74:$V21,75:$V31,76:$V41,78:196,79:197,82:$V51,83:$V61,84:$V71},{8:267,9:268,20:[1,270],32:269,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$VD,44:$V9,77:266},o($Vc1,[2,102]),o($Vc1,[2,103]),o($Vc1,[2,104]),{6:[1,271],34:$VE,35:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,102:$VR},{2:$VY,8:164,9:165,13:167,14:168,15:169,16:170,17:171,18:172,20:$VZ,21:$V_,25:[1,272],27:163,29:162,32:185,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,46:228,47:166,48:173,49:174,50:175,51:176,52:177,53:178,54:179,55:180,56:181,57:182,58:$V$,63:$V01,67:$V11,74:$V21,75:$V31,76:$V41,78:196,79:197,82:$V51,83:$V61,84:$V71},{20:[1,273]},{44:[1,274]},{25:[1,275],30:$VW},{22:[1,276],34:$VE,35:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,102:$VR},o($Vj1,[2,72]),o($Vj1,[2,74]),o($Va,[2,18]),{2:$VY,8:164,9:165,13:167,14:168,15:169,16:170,17:171,18:172,20:$VZ,21:$V_,25:[1,277],27:163,29:162,32:185,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,46:228,47:166,48:173,49:174,50:175,51:176,52:177,53:178,54:179,55:180,56:181,57:182,58:$V$,63:$V01,67:$V11,74:$V21,75:$V31,76:$V41,78:196,79:197,82:$V51,83:$V61,84:$V71},{43:[1,278]},{21:[1,279]},o($Vc1,$Vb1,{6:[1,280]}),{22:[1,281],30:$VW},{22:[1,282],34:$VE,35:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,102:$VR},{22:[1,283],34:$VE,35:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,102:$VR},{22:[1,284],34:$VE,35:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,102:$VR},{22:[1,285],34:$VE,35:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,102:$VR},{2:$VY,8:164,9:165,13:167,14:168,15:169,16:170,17:171,18:172,20:$VZ,21:$V_,25:[1,286],27:163,29:162,32:185,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,46:228,47:166,48:173,49:174,50:175,51:176,52:177,53:178,54:179,55:180,56:181,57:182,58:$V$,63:$V01,67:$V11,74:$V21,75:$V31,76:$V41,78:196,79:197,82:$V51,83:$V61,84:$V71},{74:[1,287]},{6:[1,288]},{6:[2,96]},{6:[2,97]},{20:$Vf1},{37:$Vd},o($Vc1,[2,105]),o($Va,[2,27]),o($VU,[2,31]),{17:65,20:$Vk,21:$Vl,29:64,31:289,48:66,86:$Vm,87:$Vn,88:$Vo,89:$Vp,91:$Vq,101:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA,112:$VB},{6:[1,290]},o($VS,[2,142]),o($Va,[2,19]),{34:[1,291]},{17:65,20:$Vk,21:$Vl,29:64,31:292,48:66,86:$Vm,87:$Vn,88:$Vo,89:$Vp,91:$Vq,101:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA,112:$VB},o($Vc1,[2,20]),o($Vc1,$Vi1,{6:[1,293]}),{6:[1,294]},{23:[1,295]},{23:[1,296]},{23:[1,297]},{74:[1,298]},{21:[1,299]},{17:65,20:$Vk,21:$Vl,29:64,31:300,48:66,86:$Vm,87:$Vn,88:$Vo,89:$Vp,91:$Vq,101:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA,112:$VB},{34:$VE,35:$VF,45:[1,301],90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,102:$VR},o($Vj1,[2,71]),{32:302,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$VD,44:$V9},{22:[1,303],34:$VE,35:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,102:$VR},o($Vc1,[2,21]),o($Vc1,[2,69]),{2:$VY,8:164,9:165,13:167,14:168,15:169,16:170,17:171,18:172,20:$VZ,21:$V_,24:304,27:163,29:162,32:185,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,46:161,47:166,48:173,49:174,50:175,51:176,52:177,53:178,54:179,55:180,56:181,57:182,58:$V$,63:$V01,67:$V11,74:$V21,75:$V31,76:$V41,78:196,79:197,82:$V51,83:$V61,84:$V71},{68:305,69:306,70:307,71:$Vk1,73:$Vl1},{2:$VY,8:164,9:165,13:167,14:168,15:169,16:170,17:171,18:172,20:$VZ,21:$V_,24:310,27:163,29:162,32:185,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,46:161,47:166,48:173,49:174,50:175,51:176,52:177,53:178,54:179,55:180,56:181,57:182,58:$V$,63:$V01,67:$V11,74:$V21,75:$V31,76:$V41,78:196,79:197,82:$V51,83:$V61,84:$V71},{21:[1,311]},{17:65,20:$Vk,21:$Vl,29:64,31:312,48:66,86:$Vm,87:$Vn,88:$Vo,89:$Vp,91:$Vq,101:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA,112:$VB},{6:[1,313],34:$VE,35:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,102:$VR},{6:[1,314]},{35:[1,315]},{6:[1,316]},{2:$VY,8:164,9:165,13:167,14:168,15:169,16:170,17:171,18:172,20:$VZ,21:$V_,25:[1,317],27:163,29:162,32:185,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,46:228,47:166,48:173,49:174,50:175,51:176,52:177,53:178,54:179,55:180,56:181,57:182,58:$V$,63:$V01,67:$V11,74:$V21,75:$V31,76:$V41,78:196,79:197,82:$V51,83:$V61,84:$V71},{25:[1,319],69:318,70:320,71:$Vk1,73:$Vl1},{25:[1,321]},o($Vm1,[2,88]),{72:[1,322]},{17:65,20:$Vk,21:$Vl,29:64,31:323,48:66,86:$Vm,87:$Vn,88:$Vo,89:$Vp,91:$Vq,101:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA,112:$VB},{2:$VY,8:164,9:165,13:167,14:168,15:169,16:170,17:171,18:172,20:$VZ,21:$V_,25:[1,324],27:163,29:162,32:185,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,46:228,47:166,48:173,49:174,50:175,51:176,52:177,53:178,54:179,55:180,56:181,57:182,58:$V$,63:$V01,67:$V11,74:$V21,75:$V31,76:$V41,78:196,79:197,82:$V51,83:$V61,84:$V71},{17:65,20:$Vk,21:$Vl,29:64,31:325,48:66,86:$Vm,87:$Vn,88:$Vo,89:$Vp,91:$Vq,101:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA,112:$VB},{22:[1,326],34:$VE,35:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,102:$VR},{20:[1,328],57:327,78:196,79:197},o($Vj1,[2,70]),{6:[1,329]},o($Vj1,[2,76]),o($Vc1,[2,77],{65:331,66:332,64:[1,330]}),{25:[1,333]},o($Vc1,[2,85]),o($Vm1,[2,87]),o($Vc1,[2,86]),{2:$VY,8:164,9:165,13:167,14:168,15:169,16:170,17:171,18:172,20:$VZ,21:$V_,24:334,27:163,29:162,32:185,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,46:161,47:166,48:173,49:174,50:175,51:176,52:177,53:178,54:179,55:180,56:181,57:182,58:$V$,63:$V01,67:$V11,74:$V21,75:$V31,76:$V41,78:196,79:197,82:$V51,83:$V61,84:$V71},{34:$VE,35:$VF,72:[1,335],90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,102:$VR},o($Vc1,[2,91]),{22:[1,336],34:$VE,35:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,102:$VR},{6:[1,337]},{22:[1,338]},{80:$Vd1,81:$Ve1},o($Vj1,[2,73]),{23:[1,339],63:$Vn1},o($Vc1,[2,79],{66:342,64:[1,341]}),o($Vo1,[2,82]),o($Vc1,[2,84]),{2:$VY,8:164,9:165,13:167,14:168,15:169,16:170,17:171,18:172,20:$VZ,21:$V_,25:[2,90],27:163,29:162,32:185,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,46:228,47:166,48:173,49:174,50:175,51:176,52:177,53:178,54:179,55:180,56:181,57:182,58:$V$,63:$V01,67:$V11,74:$V21,75:$V31,76:$V41,78:196,79:197,82:$V51,83:$V61,84:$V71},{2:$VY,8:164,9:165,13:167,14:168,15:169,16:170,17:171,18:172,20:$VZ,21:$V_,24:343,27:163,29:162,32:185,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,46:161,47:166,48:173,49:174,50:175,51:176,52:177,53:178,54:179,55:180,56:181,57:182,58:$V$,63:$V01,67:$V11,74:$V21,75:$V31,76:$V41,78:196,79:197,82:$V51,83:$V61,84:$V71},{6:[1,344]},o($Vc1,[2,93]),{23:[1,345]},{2:$VY,8:164,9:165,13:167,14:168,15:169,16:170,17:171,18:172,20:$VZ,21:$V_,24:346,27:163,29:162,32:185,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,46:161,47:166,48:173,49:174,50:175,51:176,52:177,53:178,54:179,55:180,56:181,57:182,58:$V$,63:$V01,67:$V11,74:$V21,75:$V31,76:$V41,78:196,79:197,82:$V51,83:$V61,84:$V71},{21:[1,347]},{23:[1,348],63:$Vn1},o($Vo1,[2,81]),o($Vm1,[2,89],{29:162,27:163,8:164,9:165,47:166,13:167,14:168,15:169,16:170,17:171,18:172,48:173,49:174,50:175,51:176,52:177,53:178,54:179,55:180,56:181,57:182,32:185,78:196,79:197,46:228,2:$VY,20:$VZ,21:$V_,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,58:$V$,63:$V01,67:$V11,74:$V21,75:$V31,76:$V41,82:$V51,83:$V61,84:$V71}),o($Vc1,[2,92]),{2:$VY,8:164,9:165,13:167,14:168,15:169,16:170,17:171,18:172,20:$VZ,21:$V_,24:349,25:[1,350],27:163,29:162,32:185,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,46:161,47:166,48:173,49:174,50:175,51:176,52:177,53:178,54:179,55:180,56:181,57:182,58:$V$,63:$V01,67:$V11,74:$V21,75:$V31,76:$V41,78:196,79:197,82:$V51,83:$V61,84:$V71},{2:$VY,8:164,9:165,13:167,14:168,15:169,16:170,17:171,18:172,20:$VZ,21:$V_,25:[1,351],27:163,29:162,32:185,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,46:228,47:166,48:173,49:174,50:175,51:176,52:177,53:178,54:179,55:180,56:181,57:182,58:$V$,63:$V01,67:$V11,74:$V21,75:$V31,76:$V41,78:196,79:197,82:$V51,83:$V61,84:$V71},{17:65,20:$Vk,21:$Vl,29:64,31:352,48:66,86:$Vm,87:$Vn,88:$Vo,89:$Vp,91:$Vq,101:$Vr,103:$Vs,104:$Vt,105:$Vu,106:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA,112:$VB},{2:$VY,8:164,9:165,13:167,14:168,15:169,16:170,17:171,18:172,20:$VZ,21:$V_,24:353,27:163,29:162,32:185,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,46:161,47:166,48:173,49:174,50:175,51:176,52:177,53:178,54:179,55:180,56:181,57:182,58:$V$,63:$V01,67:$V11,74:$V21,75:$V31,76:$V41,78:196,79:197,82:$V51,83:$V61,84:$V71},{2:$VY,8:164,9:165,13:167,14:168,15:169,16:170,17:171,18:172,20:$VZ,21:$V_,25:[1,354],27:163,29:162,32:185,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,46:228,47:166,48:173,49:174,50:175,51:176,52:177,53:178,54:179,55:180,56:181,57:182,58:$V$,63:$V01,67:$V11,74:$V21,75:$V31,76:$V41,78:196,79:197,82:$V51,83:$V61,84:$V71},o($Vc1,[2,95]),o($Vc1,[2,78]),{22:[1,355],34:$VE,35:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,102:$VR},{2:$VY,8:164,9:165,13:167,14:168,15:169,16:170,17:171,18:172,20:$VZ,21:$V_,25:[1,356],27:163,29:162,32:185,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,46:228,47:166,48:173,49:174,50:175,51:176,52:177,53:178,54:179,55:180,56:181,57:182,58:$V$,63:$V01,67:$V11,74:$V21,75:$V31,76:$V41,78:196,79:197,82:$V51,83:$V61,84:$V71},o($Vc1,[2,94]),{23:[1,357]},o($Vc1,[2,80]),{2:$VY,8:164,9:165,13:167,14:168,15:169,16:170,17:171,18:172,20:$VZ,21:$V_,24:358,27:163,29:162,32:185,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,46:161,47:166,48:173,49:174,50:175,51:176,52:177,53:178,54:179,55:180,56:181,57:182,58:$V$,63:$V01,67:$V11,74:$V21,75:$V31,76:$V41,78:196,79:197,82:$V51,83:$V61,84:$V71},{2:$VY,8:164,9:165,13:167,14:168,15:169,16:170,17:171,18:172,20:$VZ,21:$V_,25:[1,359],27:163,29:162,32:185,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,46:228,47:166,48:173,49:174,50:175,51:176,52:177,53:178,54:179,55:180,56:181,57:182,58:$V$,63:$V01,67:$V11,74:$V21,75:$V31,76:$V41,78:196,79:197,82:$V51,83:$V61,84:$V71},o($Vo1,[2,83])],
defaultActions: {27:[2,1],30:[2,2],267:[2,96],268:[2,97]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

        const TIPO_OPERACION= require('../controladores/Enums/TipoOperacion');
        const TIPO_VALOR = require('../controladores/Enums/TipoValor');
        const TIPO_DATO= require('../controladores/Enums/TipoDato');
        const INSTRUCCION = require('../controladores/Instruccion/Instruccion');     

        let respuesta = {
                LIns: [],
                err: ""
        };
              
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1://comentario lineal
break;
case 2:// comentario multiple líneas   
break;
case 3:return 38
break;
case 4:return 39
break;
case 5:return 41
break;
case 6:return 40
break;
case 7:return 42
break;
case 8:return 43
break;
case 9:return 63
break;
case 10:return 64
break;
case 11:return 67
break;
case 12:return 71
break;
case 13:return 75
break;
case 14:return 74
break;
case 15:return 76
break;
case 16:return 82
break;
case 17:return 83
break;
case 18:return 84
break;
case 19:return 73
break;
case 20:return 19
break;
case 21:return 59
break;
case 22:return 61
break;
case 23:return 'Rsetvalue'
break;
case 24:return 58
break;
case 25:return 103
break;
case 26:return 104
break;
case 27:return 36
break;
case 28:return 112
break;
case 29:return 62
break;
case 30:return 106
break;
case 31:return 105
break;
case 32:return 107
break;
case 33:return 108
break;
case 34:return 109
break;
case 35:return 110
break;
case 36:return 111
break;
case 37:return 86
break;
case 38:return 60
break;
case 39:return 87
break;
case 40:return 102       
break;
case 41:return 98
break;
case 42:return 96
break;
case 43:return 34
break;
case 44:return 97
break;
case 45:return 37
break;
case 46:return 35
break;
case 47:return 30
break;
case 48:return 6
break;
case 49:return 72
break;
case 50:return 100
break;
case 51:return 99
break;
case 52:return 23
break;
case 53:return 25
break;
case 54:return 92
break;
case 55:return 93
break;
case 56:return 81
break;
case 57:return 80   
break;
case 58:return 91
break;
case 59:return 90
break;
case 60:return 94
break;
case 61:return 101
break;
case 62:return 95
break;
case 63:return 21
break;
case 64:return 22
break;
case 65:return 44
break;
case 66:return 45
break;
case 67:return 20
break;
case 68:return 88
break;
case 69:return 89
break;
case 70:return 5
break;
case 71: respuesta.err  =  "Tipo de Error: Lexico, Descirpcion: "+ yy_.yytext + " Linea: "  + (yy_.yylloc.first_line-1) + ", Columna: " + yy_.yylloc.first_column ; return respuesta; 
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:list\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:do\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:default\b)/i,/^(?:void\b)/i,/^(?:new\b)/i,/^(?:add\b)/i,/^(?:setvalue\b)/i,/^(?:print\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:main\b)/i,/^(?:getvalue\b)/i,/^(?:tochararray\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:length\b)/i,/^(?:truncate\b)/i,/^(?:round\b)/i,/^(?:typeof\b)/i,/^(?:tostring\b)/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:\.)/i,/^(?:[0-9]+\b)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:=)/i,/^(?:>)/i,/^(?:,)/i,/^(?:;)/i,/^(?::)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:--)/i,/^(?:\+\+)/i,/^(?:-)/i,/^(?:\+)/i,/^(?:\^)/i,/^(?:!)/i,/^(?:%)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:([a-zA-Z])([a-zA-Z0-9_])*)/i,/^(?:["\""]([^"\""])*["\""])/i,/^(?:["\'"]([^"\'"])*["\'"])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}