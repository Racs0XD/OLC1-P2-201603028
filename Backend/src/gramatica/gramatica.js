/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,17],$V1=[1,16],$V2=[1,18],$V3=[1,22],$V4=[1,23],$V5=[1,24],$V6=[1,25],$V7=[1,26],$V8=[1,19],$V9=[1,27],$Va=[1,20],$Vb=[1,21],$Vc=[5,19,20,36,38,39,40,41,42,43,44,59,60],$Vd=[1,33],$Ve=[1,34],$Vf=[2,40],$Vg=[20,34,35,38,39,40,41,42,43,44],$Vh=[2,32],$Vi=[1,41],$Vj=[1,43],$Vk=[1,61],$Vl=[1,47],$Vm=[1,45],$Vn=[1,46],$Vo=[1,48],$Vp=[1,49],$Vq=[1,50],$Vr=[1,51],$Vs=[1,52],$Vt=[1,53],$Vu=[1,54],$Vv=[1,55],$Vw=[1,56],$Vx=[1,57],$Vy=[1,58],$Vz=[1,59],$VA=[1,60],$VB=[1,62],$VC=[1,68],$VD=[1,83],$VE=[1,84],$VF=[1,77],$VG=[1,78],$VH=[1,79],$VI=[1,80],$VJ=[1,81],$VK=[1,82],$VL=[1,85],$VM=[1,86],$VN=[1,87],$VO=[1,88],$VP=[1,89],$VQ=[1,90],$VR=[8,22,25,30,34,35,45,71,84,85,86,87,88,89,90,91,92,93,94,96],$VS=[1,115],$VT=[22,30],$VU=[8,22,25,30,45,71,93,94],$VV=[1,151],$VW=[22,25,30],$VX=[1,177],$VY=[1,179],$VZ=[1,180],$V_=[1,181],$V$=[1,182],$V01=[1,183],$V11=[1,184],$V21=[1,185],$V31=[1,186],$V41=[1,187],$V51=[8,22,25,30,34,35,45,71,84,85,90,91,92,93,94,96],$V61=[8,22,25,30,34,35,45,71,84,85,86,87,89,90,91,92,93,94,96],$V71=[8,22,25,30,34,35,45,71,90,91,92,93,94,96],$V81=[2,19],$V91=[20,25,38,39,40,41,42,43,44,57,59,60,62,66,70,72,73,74,75,81,82,83],$Va1=[1,220],$Vb1=[1,221],$Vc1=[8,22],$Vd1=[2,20],$Ve1=[5,19,20,25,36,38,39,40,41,42,43,44,57,59,60,62,66,70,72,73,74,75,81,82,83],$Vf1=[1,299],$Vg1=[1,298],$Vh1=[25,70,72],$Vi1=[1,330],$Vj1=[20,25,38,39,40,41,42,43,44,57,59,60,62,63,66,70,72,73,74,75,81,82,83];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"OPCIONESCUERPO":4,"EOF":5,"CUERPO":6,"DEC_VAR":7,"ptcoma":8,"ASIG_VAR":9,"METODOS":10,"FUNCIONES":11,"MAIN":12,"DEC_VEC":13,"AS_VEC":14,"DEC_LISTA":15,"ADD_LISTA":16,"UPD_LISTA":17,"CHARARRAY":18,"Rvoid":19,"identificador":20,"parA":21,"parC":22,"llaveA":23,"INSTRUCCIONES":24,"llaveC":25,"LPARAMETROS":26,"LLAMADAMETODO":27,"LISTAVALORES":28,"LLAMADAFUNCION":29,"coma":30,"EXPRESION":31,"TIPO":32,"PARAMETROS":33,"menor":34,"mayor":35,"Rmain":36,"igual":37,"Rint":38,"Rdouble":39,"Rchar":40,"Rboolean":41,"Rstring":42,"Rlist":43,"corA":44,"corC":45,"INSTRUCCION":46,"PRINT":47,"IF":48,"SWITCH":49,"WHILE":50,"DOWHILE":51,"FOR":52,"BREAK":53,"CONTINUE":54,"RETURN":55,"INSTRUCCIONFOR":56,"Rprint":57,"Rnew":58,"Rappend":59,"Rsetvalue":60,"Rtochararray":61,"Rif":62,"Relse":63,"ELSEIFS":64,"CONELSEIF":65,"Rswitch":66,"CSWITCH":67,"DEF":68,"CONSWITCH":69,"Rcase":70,"dospuntos":71,"Rdefault":72,"Rwhile":73,"Rdo":74,"Rfor":75,"CUERPOFOR":76,"INCREMENTO":77,"DECREMENTO":78,"masmas":79,"menosmenos":80,"Rbreak":81,"Rcontinue":82,"Rreturn":83,"suma":84,"menos":85,"multi":86,"div":87,"exponente":88,"modulo":89,"menorIgual":90,"mayorIgual":91,"diferente":92,"and":93,"or":94,"not":95,"igualigual":96,"decimal":97,"entero":98,"Rtrue":99,"Rfalse":100,"string":101,"char":102,"Rtoupper":103,"Rtolower":104,"Rlength":105,"Rtruncate":106,"Rround":107,"Rtypeof":108,"Rtostring":109,"Rgetvalue":110,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"ptcoma",19:"Rvoid",20:"identificador",21:"parA",22:"parC",23:"llaveA",25:"llaveC",30:"coma",34:"menor",35:"mayor",36:"Rmain",37:"igual",38:"Rint",39:"Rdouble",40:"Rchar",41:"Rboolean",42:"Rstring",43:"Rlist",44:"corA",45:"corC",57:"Rprint",58:"Rnew",59:"Rappend",60:"Rsetvalue",61:"Rtochararray",62:"Rif",63:"Relse",66:"Rswitch",70:"Rcase",71:"dospuntos",72:"Rdefault",73:"Rwhile",74:"Rdo",75:"Rfor",79:"masmas",80:"menosmenos",81:"Rbreak",82:"Rcontinue",83:"Rreturn",84:"suma",85:"menos",86:"multi",87:"div",88:"exponente",89:"modulo",90:"menorIgual",91:"mayorIgual",92:"diferente",93:"and",94:"or",95:"not",96:"igualigual",97:"decimal",98:"entero",99:"Rtrue",100:"Rfalse",101:"string",102:"char",103:"Rtoupper",104:"Rtolower",105:"Rlength",106:"Rtruncate",107:"Rround",108:"Rtypeof",109:"Rtostring",110:"Rgetvalue"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[10,7],[10,8],[27,4],[27,5],[29,3],[29,4],[28,3],[28,1],[11,7],[11,8],[26,3],[26,1],[33,2],[33,5],[33,3],[12,5],[12,6],[7,2],[7,4],[9,3],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,2],[24,2],[24,1],[46,1],[46,1],[46,2],[46,2],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,2],[47,5],[13,11],[13,9],[14,7],[15,12],[16,7],[17,9],[18,11],[48,7],[48,11],[48,8],[48,12],[64,2],[64,1],[65,8],[49,8],[49,7],[49,7],[67,2],[67,1],[69,4],[68,3],[50,7],[51,9],[51,8],[52,11],[52,10],[76,1],[76,1],[56,1],[56,1],[77,2],[78,2],[53,2],[54,2],[55,2],[55,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,2],[31,2],[31,3],[31,3],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,4],[31,4],[31,4],[31,4],[31,4],[31,4],[31,4],[31,4],[31,6],[31,1],[31,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
respuesta.err = ""; respuesta.LIns = $$[$0-1]; return respuesta;
break;
case 2: case 82:
$$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 3: case 26: case 77: case 83:
this.$=[$$[$0]];
break;
case 4: case 5: case 47:
this.$=$$[$0-1];
break;
case 6: case 7: case 8: case 45: case 48: case 91: case 92:
this.$=$$[$0];
break;
case 9: case 10: case 11: case 12: case 13: case 14: case 44: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 59: case 60: case 61: case 62: case 93: case 94: case 134:
this.$=$$[$0]
break;
case 15:
this.$ = INSTRUCCION.nuevoMetodo($$[$0-5], null, $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 16:
this.$ = INSTRUCCION.nuevoMetodo($$[$0-6], $$[$0-4], $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 17:
this.$ = INSTRUCCION.nuevaLlamada($$[$0-3], null, this._$.first_line,this._$.first_column+1)
break;
case 18:
this.$ = INSTRUCCION.nuevaLlamada($$[$0-4], $$[$0-2], this._$.first_line,this._$.first_column+1)
break;
case 19:
this.$ = INSTRUCCION.nuevaLlamadaFuncion($$[$0-2], null, this._$.first_line,this._$.first_column+1)
break;
case 20:
this.$ = INSTRUCCION.nuevaLlamadaFuncion($$[$0-3], $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 21:
$$[$0-2].push($$[$0]); this.$=$$[$0-2]
break;
case 22:
this.$=[$$[$0]]
break;
case 23:
this.$ = INSTRUCCION.nuevaFuncion($$[$0-6], $$[$0-5], null, $$[$0-1], $$[$0], this._$.first_line,this._$.first_column+1)
break;
case 24:
this.$ = INSTRUCCION.nuevaFuncion($$[$0-7], $$[$0-6], $$[$0-4], $$[$0-1], $$[$0], this._$.first_line,this._$.first_column+1)
break;
case 25:
$$[$0-2].push($$[$0]); this.$=$$[$0-2];
break;
case 27: case 29:
this.$ = INSTRUCCION.nuevaDeclaracion($$[$0], null, $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 28:
this.$ = INSTRUCCION.nuevaDeclaracion($$[$0], null, $$[$0-4], this._$.first_line,this._$.first_column+1)
break;
case 30:
this.$ = INSTRUCCION.nuevoMain($$[$0-3], null, this._$.first_line,this._$.first_column+1)
break;
case 31:
this.$ = INSTRUCCION.nuevoMain($$[$0-4], $$[$0-2], this._$.first_line,this._$.first_column+1)
break;
case 32:
this.$= INSTRUCCION.nuevaDeclaracion($$[$0],null, $$[$0-1],this._$.first_line, this._$.first_column+1)
break;
case 33:
this.$= INSTRUCCION.nuevaDeclaracion($$[$0-2], $$[$0], $$[$0-3],this._$.first_line, this._$.first_column+1)
break;
case 34:
this.$ = INSTRUCCION.nuevaAsignacion($$[$0-2], $$[$0],this._$.first_line, this._$.first_column+1)
break;
case 35:
this.$= TIPO_DATO.ENTERO
break;
case 36:
this.$= TIPO_DATO.DECIMAL
break;
case 37:
this.$= TIPO_DATO.CHAR
break;
case 38:
this.$= TIPO_DATO.BOOL
break;
case 39:
this.$= TIPO_DATO.CADENA
break;
case 40:
this.$ = TIPO_DATO.LISTA
break;
case 41:
this.$ = TIPO_DATO.VECTOR
break;
case 42:
this.$ = $$[$0-1]; $$[$0-1].push($$[$0]);
break;
case 43:
this.$ = [$$[$0]];
break;
case 46: case 63: case 116:
this.$=$$[$0-1]
break;
case 64:
this.$ = INSTRUCCION.nuevoPrint($$[$0-2], this._$.first_line,this._$.first_column+1)
break;
case 65:
this.$ = INSTRUCCION.nuevaDeclaracionVector($$[$0-10],$$[$0-9],$$[$0-4],$$[$0-2],this._$.first_line,this._$.first_column+1)
break;
case 66:
this.$ = INSTRUCCION.nuevaDeclaracionVector($$[$0-8],$$[$0-7],null,$$[$0-2],this._$.first_line,this._$.first_column+1)
break;
case 67:
this.$ = INSTRUCCION.nuevaAsignacionVector($$[$0-6], $$[$0-4], $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 68:
this.$ = INSTRUCCION.nuevaDeclaracionLista($$[$0-9],$$[$0-7],$$[$0-2],this._$.first_line,this._$.first_column+1)
break;
case 69:
this.$ = INSTRUCCION.nuevaAsignacionLista($$[$0-4], $$[$0-2], this._$.first_line,this._$.first_column+1)
break;
case 70:
this.$ = INSTRUCCION.nuevoUpdateLista($$[$0-6], $$[$0-4], $$[$0-2], this._$.first_line,this._$.first_column+1)
break;
case 71:
this.$ = INSTRUCCION.nuevoCharArray($$[$0-8], $$[$0-6], $$[$0-2], this._$.first_line,this._$.first_column+1)
break;
case 72:
this.$ = new INSTRUCCION.nuevoIf($$[$0-4], $$[$0-1] , this._$.first_line,this._$.first_column+1)
break;
case 73:
this.$ = new INSTRUCCION.nuevoIfElse($$[$0-8], $$[$0-5], $$[$0-1] , this._$.first_line,this._$.first_column+1)
break;
case 74:
this.$ = new INSTRUCCION.nuevoIfElseIf($$[$0-5], $$[$0-2],$$[$0],null,this._$.first_line, this._$.first_column+1)
break;
case 75:
this.$ = new INSTRUCCION.nuevoIfElseIf($$[$0-9], $$[$0-6],$$[$0-4],$$[$0-1],this._$.first_line, this._$.first_column+1)
break;
case 76:
$$[$0-1].push($$[$0]); this.$=$$[$0-1]
break;
case 78:
this.$ = new INSTRUCCION.nuevoElseIf($$[$0-4], $$[$0-1],this._$.first_line, this._$.first_column+1)
break;
case 79:
this.$= new INSTRUCCION.nuevoSwitch($$[$0-5], $$[$0-2], $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 80:
this.$= new INSTRUCCION.nuevoSwitch($$[$0-4], $$[$0-1], null, this._$.first_line,this._$.first_column+1)
break;
case 81:
this.$= new INSTRUCCION.nuevoSwitch($$[$0-4], null, $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 84:
this.$ = new INSTRUCCION.nuevoCase($$[$0-2], $$[$0] , this._$.first_line,this._$.first_column+1) 
break;
case 85:
this.$ = $$[$0]
break;
case 86:
this.$ = new INSTRUCCION.nuevoWhile($$[$0-4], $$[$0-1] , this._$.first_line,this._$.first_column+1)
break;
case 87:
this.$ = new INSTRUCCION.nuevoDoWhile($$[$0-2], $$[$0-6] , this._$.first_line,this._$.first_column+1)
break;
case 88:
this.$ = new INSTRUCCION.nuevoDoWhile($$[$0-2], [] , this._$.first_line,(this._$.first_column+1));
break;
case 89:
this.$ = new INSTRUCCION.nuevoFor($$[$0-8], $$[$0-6], $$[$0-4], $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 90:
this.$ = new INSTRUCCION.nuevoFor($$[$0-7], $$[$0-5], $$[$0-3], $$[$0], this._$.first_line,this._$.first_column+1)
break;
case 95:
this.$= INSTRUCCION.nuevoIncremento($$[$0-1],this._$.first_line,this._$.first_column+1)
break;
case 96:
this.$= INSTRUCCION.nuevoDecremento($$[$0-1],this._$.first_line,this._$.first_column+1)
break;
case 97:
this.$ = new INSTRUCCION.nuevoBreak(this._$.first_line,this._$.first_column+1)
break;
case 98:
this.$ = new INSTRUCCION.nuevoContinue(this._$.first_line,this._$.first_column+1)
break;
case 99:
this.$ = new INSTRUCCION.nuevoReturn(this._$.first_line,this._$.first_column+1)
break;
case 100:
this.$ = new INSTRUCCION.nuevoReturn($$[$0-1],this._$.first_line,this._$.first_column+1)
break;
case 101:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.SUMA,this._$.first_line, this._$.first_column+1);
break;
case 102:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.RESTA,this._$.first_line, this._$.first_column+1);
break;
case 103:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MULTIPLICACION,this._$.first_line, this._$.first_column+1);
break;
case 104:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.DIVISION,this._$.first_line, this._$.first_column+1);
break;
case 105:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.POTENCIA,this._$.first_line, this._$.first_column+1);
break;
case 106:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MODULO,this._$.first_line, this._$.first_column+1);
break;
case 107:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MENOR,this._$.first_line, this._$.first_column+1);
break;
case 108:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MAYOR,this._$.first_line, this._$.first_column+1);
break;
case 109:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MENORIGUAL,this._$.first_line, this._$.first_column+1);
break;
case 110:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MAYORIGUAL,this._$.first_line, this._$.first_column+1);
break;
case 111:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.DIFERENTE,this._$.first_line, this._$.first_column+1);
break;
case 112:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.AND,this._$.first_line, this._$.first_column+1);
break;
case 113:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.OR,this._$.first_line, this._$.first_column+1);
break;
case 114:
this.$= INSTRUCCION.nuevaOperacionUnaria($$[$0], TIPO_OPERACION.UNARIA,this._$.first_line, this._$.first_column+1);
break;
case 115:
this.$= INSTRUCCION.nuevaOperacionBinaria(null,$$[$0], TIPO_OPERACION.NOT,this._$.first_line, this._$.first_column+1);
break;
case 117:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.IGUALIGUAL,this._$.first_line, this._$.first_column+1);
break;
case 118:
this.$= INSTRUCCION.nuevoValor(Number($$[$0]),TIPO_VALOR.DECIMAL,this._$.first_line, this._$.first_column+1);
break;
case 119:
this.$= INSTRUCCION.nuevoValor(Number($$[$0]),TIPO_VALOR.ENTERO,this._$.first_line, this._$.first_column+1);
break;
case 120: case 121:
this.$= INSTRUCCION.nuevoValor($$[$0],TIPO_VALOR.BOOL,this._$.first_line, this._$.first_column+1);
break;
case 122:
this.$= INSTRUCCION.nuevoValor($$[$0],TIPO_VALOR.CADENA,this._$.first_line, this._$.first_column+1);
break;
case 123:
this.$= INSTRUCCION.nuevoValor($$[$0],TIPO_VALOR.CHAR,this._$.first_line, this._$.first_column+1);
break;
case 124:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-1],$$[$0-1], TIPO_OPERACION.TOUPPER,this._$.first_line,this._$.first_column+1);
break;
case 125:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-1],$$[$0-1], TIPO_OPERACION.TOLOWER,this._$.first_line,this._$.first_column+1);
break;
case 126:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-1],$$[$0-1], TIPO_OPERACION.LENGTH,this._$.first_line,this._$.first_column+1);
break;
case 127:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-1],$$[$0-1], TIPO_OPERACION.TRUNCATE,this._$.first_line,this._$.first_column+1);
break;
case 128:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-1],$$[$0-1], TIPO_OPERACION.ROUND,this._$.first_line,this._$.first_column+1);
break;
case 129:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-1],$$[$0-1], TIPO_OPERACION.TYPEOF,this._$.first_line,this._$.first_column+1);
break;
case 130:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-1],$$[$0-1], TIPO_OPERACION.TOSTRING,this._$.first_line,this._$.first_column+1);
break;
case 131:
this.$ = INSTRUCCION.nuevoValorVector($$[$0-3],$$[$0-1], TIPO_VALOR.VECTOR, this._$.first_line,this._$.first_column+1)
break;
case 132:
this.$ = INSTRUCCION.nuevoValorLista($$[$0-3],$$[$0-1], TIPO_VALOR.LISTA, this._$.first_line,this._$.first_column+1)
break;
case 133:
this.$= INSTRUCCION.nuevoValor($$[$0],TIPO_VALOR.IDENTIFICADOR,this._$.first_line, this._$.first_column+1);
break;
}
},
table: [{3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V0,20:$V1,32:15,36:$V2,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,59:$Va,60:$Vb},{1:[3]},{5:[1,28],6:29,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V0,20:$V1,32:15,36:$V2,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,59:$Va,60:$Vb},o($Vc,[2,3]),{8:[1,30]},{8:[1,31]},o($Vc,[2,6]),o($Vc,[2,7]),o($Vc,[2,8]),o($Vc,[2,9]),o($Vc,[2,10]),o($Vc,[2,11]),o($Vc,[2,12]),o($Vc,[2,13]),o($Vc,[2,14]),{20:[1,32]},{37:$Vd,44:$Ve},{20:[1,35]},{20:[1,36]},{20:$Vf,34:[1,37]},{21:[1,38]},{21:[1,39]},o($Vg,[2,35]),o($Vg,[2,36]),o($Vg,[2,37]),o($Vg,[2,38]),o($Vg,[2,39]),{45:[1,40]},{1:[2,1]},o($Vc,[2,2]),o($Vc,[2,4]),o($Vc,[2,5]),{8:$Vh,21:[1,42],37:$Vi,44:$Vj},{20:$Vk,21:$Vl,29:63,31:44,85:$Vm,95:$Vn,97:$Vo,98:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy,108:$Vz,109:$VA,110:$VB},{20:$Vk,21:$Vl,29:63,31:64,85:$Vm,95:$Vn,97:$Vo,98:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy,108:$Vz,109:$VA,110:$VB},{21:[1,65]},{21:[1,66]},{32:67,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$VC,44:$V9},{20:[1,69]},{20:[1,70]},o($Vg,[2,41]),{20:$Vk,21:$Vl,29:63,31:71,85:$Vm,95:$Vn,97:$Vo,98:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy,108:$Vz,109:$VA,110:$VB},{22:[1,72],26:73,32:75,33:74,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$VC,44:$V9},{45:[1,76]},{8:[2,34],34:$VD,35:$VE,84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,96:$VQ},{20:$Vk,21:$Vl,29:63,31:91,85:$Vm,95:$Vn,97:$Vo,98:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy,108:$Vz,109:$VA,110:$VB},{20:$Vk,21:$Vl,29:63,31:92,85:$Vm,95:$Vn,97:$Vo,98:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy,108:$Vz,109:$VA,110:$VB},{20:$Vk,21:$Vl,29:63,31:93,85:$Vm,95:$Vn,97:$Vo,98:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy,108:$Vz,109:$VA,110:$VB},o($VR,[2,118]),o($VR,[2,119]),o($VR,[2,120]),o($VR,[2,121]),o($VR,[2,122]),o($VR,[2,123]),{21:[1,94]},{21:[1,95]},{21:[1,96]},{21:[1,97]},{21:[1,98]},{21:[1,99]},{21:[1,100]},o($VR,[2,133],{21:[1,102],44:[1,101]}),{21:[1,103]},o($VR,[2,134]),{34:$VD,35:$VE,45:[1,104],84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,96:$VQ},{22:[1,105],26:106,32:75,33:74,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$VC,44:$V9},{20:$Vk,21:$Vl,22:[1,107],28:108,29:63,31:109,85:$Vm,95:$Vn,97:$Vo,98:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy,108:$Vz,109:$VA,110:$VB},{35:[1,110]},o($Vg,$Vf),{30:[1,111]},{30:[1,112]},{8:[2,33],34:$VD,35:$VE,84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,96:$VQ},{23:[1,113]},{22:[1,114],30:$VS},o($VT,[2,26]),{20:[1,116],32:118,34:[1,117],38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$VC,44:$V9},{37:[1,119]},{20:$Vk,21:$Vl,29:63,31:120,85:$Vm,95:$Vn,97:$Vo,98:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy,108:$Vz,109:$VA,110:$VB},{20:$Vk,21:$Vl,29:63,31:121,85:$Vm,95:$Vn,97:$Vo,98:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy,108:$Vz,109:$VA,110:$VB},{20:$Vk,21:$Vl,29:63,31:122,85:$Vm,95:$Vn,97:$Vo,98:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy,108:$Vz,109:$VA,110:$VB},{20:$Vk,21:$Vl,29:63,31:123,85:$Vm,95:$Vn,97:$Vo,98:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy,108:$Vz,109:$VA,110:$VB},{20:$Vk,21:$Vl,29:63,31:124,85:$Vm,95:$Vn,97:$Vo,98:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy,108:$Vz,109:$VA,110:$VB},{20:$Vk,21:$Vl,29:63,31:125,85:$Vm,95:$Vn,97:$Vo,98:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy,108:$Vz,109:$VA,110:$VB},{20:$Vk,21:$Vl,29:63,31:126,85:$Vm,95:$Vn,97:$Vo,98:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy,108:$Vz,109:$VA,110:$VB},{20:$Vk,21:$Vl,29:63,31:127,85:$Vm,95:$Vn,97:$Vo,98:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy,108:$Vz,109:$VA,110:$VB},{20:$Vk,21:$Vl,29:63,31:128,85:$Vm,95:$Vn,97:$Vo,98:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy,108:$Vz,109:$VA,110:$VB},{20:$Vk,21:$Vl,29:63,31:129,85:$Vm,95:$Vn,97:$Vo,98:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy,108:$Vz,109:$VA,110:$VB},{20:$Vk,21:$Vl,29:63,31:130,85:$Vm,95:$Vn,97:$Vo,98:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy,108:$Vz,109:$VA,110:$VB},{20:$Vk,21:$Vl,29:63,31:131,85:$Vm,95:$Vn,97:$Vo,98:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy,108:$Vz,109:$VA,110:$VB},{20:$Vk,21:$Vl,29:63,31:132,85:$Vm,95:$Vn,97:$Vo,98:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy,108:$Vz,109:$VA,110:$VB},{20:$Vk,21:$Vl,29:63,31:133,85:$Vm,95:$Vn,97:$Vo,98:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy,108:$Vz,109:$VA,110:$VB},o($VR,[2,114]),o($VU,[2,115],{34:$VD,35:$VE,84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,96:$VQ}),{22:[1,134],34:$VD,35:$VE,84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,96:$VQ},{20:$Vk,21:$Vl,29:63,31:135,85:$Vm,95:$Vn,97:$Vo,98:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy,108:$Vz,109:$VA,110:$VB},{20:$Vk,21:$Vl,29:63,31:136,85:$Vm,95:$Vn,97:$Vo,98:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy,108:$Vz,109:$VA,110:$VB},{20:$Vk,21:$Vl,29:63,31:137,85:$Vm,95:$Vn,97:$Vo,98:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy,108:$Vz,109:$VA,110:$VB},{20:$Vk,21:$Vl,29:63,31:138,85:$Vm,95:$Vn,97:$Vo,98:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy,108:$Vz,109:$VA,110:$VB},{20:$Vk,21:$Vl,29:63,31:139,85:$Vm,95:$Vn,97:$Vo,98:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy,108:$Vz,109:$VA,110:$VB},{20:$Vk,21:$Vl,29:63,31:140,85:$Vm,95:$Vn,97:$Vo,98:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy,108:$Vz,109:$VA,110:$VB},{20:$Vk,21:$Vl,29:63,31:141,85:$Vm,95:$Vn,97:$Vo,98:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy,108:$Vz,109:$VA,110:$VB},{20:$Vk,21:$Vl,29:63,31:142,85:$Vm,95:$Vn,97:$Vo,98:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy,108:$Vz,109:$VA,110:$VB},{20:$Vk,21:$Vl,22:[1,143],28:144,29:63,31:109,85:$Vm,95:$Vn,97:$Vo,98:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy,108:$Vz,109:$VA,110:$VB},{20:[1,145]},{37:[1,146]},{23:[1,147]},{22:[1,148],30:$VS},{8:[1,149]},{22:[1,150],30:$VV},o($VW,[2,22],{34:$VD,35:$VE,84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,96:$VQ}),{20:[1,152]},{20:$Vk,21:$Vl,29:63,31:153,85:$Vm,95:$Vn,97:$Vo,98:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy,108:$Vz,109:$VA,110:$VB},{20:$Vk,21:$Vl,29:63,31:154,85:$Vm,95:$Vn,97:$Vo,98:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy,108:$Vz,109:$VA,110:$VB},{7:159,9:160,13:162,14:163,15:164,16:165,17:166,18:167,20:$VX,24:155,27:158,29:157,32:178,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,46:156,47:161,48:168,49:169,50:170,51:171,52:172,53:173,54:174,55:175,56:176,57:$VY,59:$Va,60:$Vb,62:$VZ,66:$V_,73:$V$,74:$V01,75:$V11,77:188,78:189,81:$V21,82:$V31,83:$V41},{23:[1,190]},{32:75,33:191,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$VC,44:$V9},o($VT,[2,27]),{32:192,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$VC,44:$V9},{20:[1,193]},{23:[1,195],58:[1,194]},o($V51,[2,101],{86:$VH,87:$VI,88:$VJ,89:$VK}),o($V51,[2,102],{86:$VH,87:$VI,88:$VJ,89:$VK}),o($V61,[2,103],{88:$VJ}),o($V61,[2,104],{88:$VJ}),o($V61,[2,105]),o($V61,[2,106],{88:$VJ}),o($V71,[2,107],{84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK}),o($V71,[2,108],{84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK}),o($V71,[2,109],{84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK}),o($V71,[2,110],{84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK}),o($V71,[2,111],{84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK}),o($VU,[2,112],{34:$VD,35:$VE,84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,96:$VQ}),o([8,22,25,30,45,71,94],[2,113],{34:$VD,35:$VE,84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,96:$VQ}),o($V71,[2,117],{84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK}),o($VR,[2,116]),{22:[1,196],34:$VD,35:$VE,84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,96:$VQ},{22:[1,197],34:$VD,35:$VE,84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,96:$VQ},{22:[1,198],34:$VD,35:$VE,84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,96:$VQ},{22:[1,199],34:$VD,35:$VE,84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,96:$VQ},{22:[1,200],34:$VD,35:$VE,84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,96:$VQ},{22:[1,201],34:$VD,35:$VE,84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,96:$VQ},{22:[1,202],34:$VD,35:$VE,84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,96:$VQ},{34:$VD,35:$VE,45:[1,203],84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,96:$VQ},o($VR,$V81),{22:[1,204],30:$VV},{30:[1,205]},{20:$Vk,21:$Vl,29:63,31:206,85:$Vm,95:$Vn,97:$Vo,98:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy,108:$Vz,109:$VA,110:$VB},{7:159,9:160,13:162,14:163,15:164,16:165,17:166,18:167,20:$VX,24:207,27:158,29:157,32:178,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,46:156,47:161,48:168,49:169,50:170,51:171,52:172,53:173,54:174,55:175,56:176,57:$VY,59:$Va,60:$Vb,62:$VZ,66:$V_,73:$V$,74:$V01,75:$V11,77:188,78:189,81:$V21,82:$V31,83:$V41},{23:[1,208]},o($Vc,[2,30]),{8:[1,209]},{20:$Vk,21:$Vl,29:63,31:210,85:$Vm,95:$Vn,97:$Vo,98:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy,108:$Vz,109:$VA,110:$VB},{37:[1,211]},{22:[1,212],34:$VD,35:$VE,84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,96:$VQ},{30:[1,213],34:$VD,35:$VE,84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,96:$VQ},{7:159,9:160,13:162,14:163,15:164,16:165,17:166,18:167,20:$VX,25:[1,214],27:158,29:157,32:178,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,46:215,47:161,48:168,49:169,50:170,51:171,52:172,53:173,54:174,55:175,56:176,57:$VY,59:$Va,60:$Vb,62:$VZ,66:$V_,73:$V$,74:$V01,75:$V11,77:188,78:189,81:$V21,82:$V31,83:$V41},o($V91,[2,43]),o($V91,[2,44]),o($V91,[2,45]),{8:[1,216]},{8:[1,217]},o($V91,[2,48]),o($V91,[2,49]),o($V91,[2,50]),o($V91,[2,51]),o($V91,[2,52]),o($V91,[2,53]),o($V91,[2,54]),o($V91,[2,55]),o($V91,[2,56]),o($V91,[2,57]),o($V91,[2,58]),o($V91,[2,59]),o($V91,[2,60]),o($V91,[2,61]),o($V91,[2,62]),{8:[1,218]},{21:[1,219],37:$Vd,44:$Ve,79:$Va1,80:$Vb1},{20:[1,222]},{21:[1,223]},{21:[1,224]},{21:[1,225]},{21:[1,226]},{23:[1,227]},{21:[1,228]},{8:[1,229]},{8:[1,230]},{8:[1,231],20:$Vk,21:$Vl,29:63,31:232,85:$Vm,95:$Vn,97:$Vo,98:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy,108:$Vz,109:$VA,110:$VB},o($Vc1,[2,93]),o($Vc1,[2,94]),{7:159,9:160,13:162,14:163,15:164,16:165,17:166,18:167,20:$VX,24:233,27:158,29:157,32:178,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,46:156,47:161,48:168,49:169,50:170,51:171,52:172,53:173,54:174,55:175,56:176,57:$VY,59:$Va,60:$Vb,62:$VZ,66:$V_,73:$V$,74:$V01,75:$V11,77:188,78:189,81:$V21,82:$V31,83:$V41},o($VT,[2,25]),{35:[1,234]},o($VT,[2,29]),{32:235,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$VC,44:$V9},{20:$Vk,21:$Vl,28:236,29:63,31:109,85:$Vm,95:$Vn,97:$Vo,98:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy,108:$Vz,109:$VA,110:$VB},o($VR,[2,124]),o($VR,[2,125]),o($VR,[2,126]),o($VR,[2,127]),o($VR,[2,128]),o($VR,[2,129]),o($VR,[2,130]),o($VR,[2,131]),o($VR,$Vd1),{20:$Vk,21:$Vl,29:63,31:237,85:$Vm,95:$Vn,97:$Vo,98:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy,108:$Vz,109:$VA,110:$VB},{8:[1,238],34:$VD,35:$VE,84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,96:$VQ},{7:159,9:160,13:162,14:163,15:164,16:165,17:166,18:167,20:$VX,25:[1,239],27:158,29:157,32:178,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,46:215,47:161,48:168,49:169,50:170,51:171,52:172,53:173,54:174,55:175,56:176,57:$VY,59:$Va,60:$Vb,62:$VZ,66:$V_,73:$V$,74:$V01,75:$V11,77:188,78:189,81:$V21,82:$V31,83:$V41},{7:159,9:160,13:162,14:163,15:164,16:165,17:166,18:167,20:$VX,24:240,27:158,29:157,32:178,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,46:156,47:161,48:168,49:169,50:170,51:171,52:172,53:173,54:174,55:175,56:176,57:$VY,59:$Va,60:$Vb,62:$VZ,66:$V_,73:$V$,74:$V01,75:$V11,77:188,78:189,81:$V21,82:$V31,83:$V41},o($Vc,[2,31]),o($VW,[2,21],{34:$VD,35:$VE,84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,96:$VQ}),{58:[1,241],61:[1,242]},{8:[1,243]},{20:$Vk,21:$Vl,29:63,31:244,85:$Vm,95:$Vn,97:$Vo,98:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy,108:$Vz,109:$VA,110:$VB},o($Vc,[2,23]),o($V91,[2,42]),o($V91,[2,46]),o($V91,[2,47]),o($V91,[2,63]),{20:$Vk,21:$Vl,22:[1,245],28:246,29:63,31:109,85:$Vm,95:$Vn,97:$Vo,98:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy,108:$Vz,109:$VA,110:$VB},o($Vc1,[2,95]),o($Vc1,[2,96]),{8:$Vh,37:$Vi,44:$Vj},{20:$Vk,21:$Vl,29:63,31:247,85:$Vm,95:$Vn,97:$Vo,98:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy,108:$Vz,109:$VA,110:$VB},{20:$Vk,21:$Vl,29:63,31:248,85:$Vm,95:$Vn,97:$Vo,98:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy,108:$Vz,109:$VA,110:$VB},{20:$Vk,21:$Vl,29:63,31:249,85:$Vm,95:$Vn,97:$Vo,98:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy,108:$Vz,109:$VA,110:$VB},{20:$Vk,21:$Vl,29:63,31:250,85:$Vm,95:$Vn,97:$Vo,98:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy,108:$Vz,109:$VA,110:$VB},{7:159,9:160,13:162,14:163,15:164,16:165,17:166,18:167,20:$VX,24:251,25:[1,252],27:158,29:157,32:178,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,46:156,47:161,48:168,49:169,50:170,51:171,52:172,53:173,54:174,55:175,56:176,57:$VY,59:$Va,60:$Vb,62:$VZ,66:$V_,73:$V$,74:$V01,75:$V11,77:188,78:189,81:$V21,82:$V31,83:$V41},{7:254,9:255,20:[1,257],32:256,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$VC,44:$V9,76:253},o($V91,[2,97]),o($V91,[2,98]),o($V91,[2,99]),{8:[1,258],34:$VD,35:$VE,84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,96:$VQ},{7:159,9:160,13:162,14:163,15:164,16:165,17:166,18:167,20:$VX,25:[1,259],27:158,29:157,32:178,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,46:215,47:161,48:168,49:169,50:170,51:171,52:172,53:173,54:174,55:175,56:176,57:$VY,59:$Va,60:$Vb,62:$VZ,66:$V_,73:$V$,74:$V01,75:$V11,77:188,78:189,81:$V21,82:$V31,83:$V41},{20:[1,260]},{44:[1,261]},{25:[1,262],30:$VV},{22:[1,263],34:$VD,35:$VE,84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,96:$VQ},o($Ve1,[2,67]),o($Vc,[2,15]),{7:159,9:160,13:162,14:163,15:164,16:165,17:166,18:167,20:$VX,25:[1,264],27:158,29:157,32:178,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,46:215,47:161,48:168,49:169,50:170,51:171,52:172,53:173,54:174,55:175,56:176,57:$VY,59:$Va,60:$Vb,62:$VZ,66:$V_,73:$V$,74:$V01,75:$V11,77:188,78:189,81:$V21,82:$V31,83:$V41},{43:[1,265]},{21:[1,266]},o($Ve1,[2,69]),{22:[1,267],34:$VD,35:$VE,84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,96:$VQ},o($V91,$V81,{8:[1,268]}),{22:[1,269],30:$VV},{22:[1,270],34:$VD,35:$VE,84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,96:$VQ},{22:[1,271],34:$VD,35:$VE,84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,96:$VQ},{22:[1,272],34:$VD,35:$VE,84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,96:$VQ},{22:[1,273],34:$VD,35:$VE,84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,96:$VQ},{7:159,9:160,13:162,14:163,15:164,16:165,17:166,18:167,20:$VX,25:[1,274],27:158,29:157,32:178,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,46:215,47:161,48:168,49:169,50:170,51:171,52:172,53:173,54:174,55:175,56:176,57:$VY,59:$Va,60:$Vb,62:$VZ,66:$V_,73:$V$,74:$V01,75:$V11,77:188,78:189,81:$V21,82:$V31,83:$V41},{73:[1,275]},{8:[1,276]},{8:[2,91]},{8:[2,92]},{20:[1,277]},{37:$Vd},o($V91,[2,100]),o($Vc,[2,24]),o($VT,[2,28]),{20:$Vk,21:$Vl,29:63,31:278,85:$Vm,95:$Vn,97:$Vo,98:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy,108:$Vz,109:$VA,110:$VB},{8:[1,279]},o($VR,[2,132]),o($Vc,[2,16]),{34:[1,280]},{20:$Vk,21:$Vl,29:63,31:281,85:$Vm,95:$Vn,97:$Vo,98:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy,108:$Vz,109:$VA,110:$VB},{8:[1,282]},o($V91,[2,17]),o($V91,$Vd1,{8:[1,283]}),{8:[1,284]},{23:[1,285]},{23:[1,286]},{23:[1,287]},{73:[1,288]},{21:[1,289]},{20:$Vk,21:$Vl,29:63,31:290,85:$Vm,95:$Vn,97:$Vo,98:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy,108:$Vz,109:$VA,110:$VB},{8:$Vh,37:$Vi},{34:$VD,35:$VE,45:[1,291],84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,96:$VQ},o($Ve1,[2,66]),{32:292,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$VC,44:$V9},{22:[1,293],34:$VD,35:$VE,84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,96:$VQ},o($Ve1,[2,70]),o($V91,[2,18]),o($V91,[2,64]),{7:159,9:160,13:162,14:163,15:164,16:165,17:166,18:167,20:$VX,24:294,27:158,29:157,32:178,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,46:156,47:161,48:168,49:169,50:170,51:171,52:172,53:173,54:174,55:175,56:176,57:$VY,59:$Va,60:$Vb,62:$VZ,66:$V_,73:$V$,74:$V01,75:$V11,77:188,78:189,81:$V21,82:$V31,83:$V41},{67:295,68:296,69:297,70:$Vf1,72:$Vg1},{7:159,9:160,13:162,14:163,15:164,16:165,17:166,18:167,20:$VX,24:300,27:158,29:157,32:178,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,46:156,47:161,48:168,49:169,50:170,51:171,52:172,53:173,54:174,55:175,56:176,57:$VY,59:$Va,60:$Vb,62:$VZ,66:$V_,73:$V$,74:$V01,75:$V11,77:188,78:189,81:$V21,82:$V31,83:$V41},{21:[1,301]},{20:$Vk,21:$Vl,29:63,31:302,85:$Vm,95:$Vn,97:$Vo,98:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy,108:$Vz,109:$VA,110:$VB},{8:[1,303],34:$VD,35:$VE,84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,96:$VQ},{8:[1,304]},{35:[1,305]},{8:[1,306]},{7:159,9:160,13:162,14:163,15:164,16:165,17:166,18:167,20:$VX,25:[1,307],27:158,29:157,32:178,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,46:215,47:161,48:168,49:169,50:170,51:171,52:172,53:173,54:174,55:175,56:176,57:$VY,59:$Va,60:$Vb,62:$VZ,66:$V_,73:$V$,74:$V01,75:$V11,77:188,78:189,81:$V21,82:$V31,83:$V41},{25:[1,309],68:308,69:310,70:$Vf1,72:$Vg1},{25:[1,311]},o($Vh1,[2,83]),{71:[1,312]},{20:$Vk,21:$Vl,29:63,31:313,85:$Vm,95:$Vn,97:$Vo,98:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy,108:$Vz,109:$VA,110:$VB},{7:159,9:160,13:162,14:163,15:164,16:165,17:166,18:167,20:$VX,25:[1,314],27:158,29:157,32:178,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,46:215,47:161,48:168,49:169,50:170,51:171,52:172,53:173,54:174,55:175,56:176,57:$VY,59:$Va,60:$Vb,62:$VZ,66:$V_,73:$V$,74:$V01,75:$V11,77:188,78:189,81:$V21,82:$V31,83:$V41},{20:$Vk,21:$Vl,29:63,31:315,85:$Vm,95:$Vn,97:$Vo,98:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy,108:$Vz,109:$VA,110:$VB},{22:[1,316],34:$VD,35:$VE,84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,96:$VQ},{20:[1,318],56:317,77:188,78:189},o($Ve1,[2,65]),{8:[1,319]},o($Ve1,[2,71]),o($V91,[2,72],{64:321,65:322,63:[1,320]}),{25:[1,323]},o($V91,[2,80]),o($Vh1,[2,82]),o($V91,[2,81]),{7:159,9:160,13:162,14:163,15:164,16:165,17:166,18:167,20:$VX,24:324,27:158,29:157,32:178,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,46:156,47:161,48:168,49:169,50:170,51:171,52:172,53:173,54:174,55:175,56:176,57:$VY,59:$Va,60:$Vb,62:$VZ,66:$V_,73:$V$,74:$V01,75:$V11,77:188,78:189,81:$V21,82:$V31,83:$V41},{34:$VD,35:$VE,71:[1,325],84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,96:$VQ},o($V91,[2,86]),{22:[1,326],34:$VD,35:$VE,84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,96:$VQ},{8:[1,327]},{22:[1,328]},{79:$Va1,80:$Vb1},o($Ve1,[2,68]),{23:[1,329],62:$Vi1},o($V91,[2,74],{65:332,63:[1,331]}),o($Vj1,[2,77]),o($V91,[2,79]),{7:159,9:160,13:162,14:163,15:164,16:165,17:166,18:167,20:$VX,25:[2,85],27:158,29:157,32:178,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,46:215,47:161,48:168,49:169,50:170,51:171,52:172,53:173,54:174,55:175,56:176,57:$VY,59:$Va,60:$Vb,62:$VZ,66:$V_,73:$V$,74:$V01,75:$V11,77:188,78:189,81:$V21,82:$V31,83:$V41},{7:159,9:160,13:162,14:163,15:164,16:165,17:166,18:167,20:$VX,24:333,27:158,29:157,32:178,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,46:156,47:161,48:168,49:169,50:170,51:171,52:172,53:173,54:174,55:175,56:176,57:$VY,59:$Va,60:$Vb,62:$VZ,66:$V_,73:$V$,74:$V01,75:$V11,77:188,78:189,81:$V21,82:$V31,83:$V41},{8:[1,334]},o($V91,[2,88]),{23:[1,335]},{7:159,9:160,13:162,14:163,15:164,16:165,17:166,18:167,20:$VX,24:336,27:158,29:157,32:178,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,46:156,47:161,48:168,49:169,50:170,51:171,52:172,53:173,54:174,55:175,56:176,57:$VY,59:$Va,60:$Vb,62:$VZ,66:$V_,73:$V$,74:$V01,75:$V11,77:188,78:189,81:$V21,82:$V31,83:$V41},{21:[1,337]},{23:[1,338],62:$Vi1},o($Vj1,[2,76]),o($Vh1,[2,84],{29:157,27:158,7:159,9:160,47:161,13:162,14:163,15:164,16:165,17:166,18:167,48:168,49:169,50:170,51:171,52:172,53:173,54:174,55:175,56:176,32:178,77:188,78:189,46:215,20:$VX,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,57:$VY,59:$Va,60:$Vb,62:$VZ,66:$V_,73:$V$,74:$V01,75:$V11,81:$V21,82:$V31,83:$V41}),o($V91,[2,87]),{7:159,9:160,13:162,14:163,15:164,16:165,17:166,18:167,20:$VX,24:339,25:[1,340],27:158,29:157,32:178,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,46:156,47:161,48:168,49:169,50:170,51:171,52:172,53:173,54:174,55:175,56:176,57:$VY,59:$Va,60:$Vb,62:$VZ,66:$V_,73:$V$,74:$V01,75:$V11,77:188,78:189,81:$V21,82:$V31,83:$V41},{7:159,9:160,13:162,14:163,15:164,16:165,17:166,18:167,20:$VX,25:[1,341],27:158,29:157,32:178,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,46:215,47:161,48:168,49:169,50:170,51:171,52:172,53:173,54:174,55:175,56:176,57:$VY,59:$Va,60:$Vb,62:$VZ,66:$V_,73:$V$,74:$V01,75:$V11,77:188,78:189,81:$V21,82:$V31,83:$V41},{20:$Vk,21:$Vl,29:63,31:342,85:$Vm,95:$Vn,97:$Vo,98:$Vp,99:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy,108:$Vz,109:$VA,110:$VB},{7:159,9:160,13:162,14:163,15:164,16:165,17:166,18:167,20:$VX,24:343,27:158,29:157,32:178,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,46:156,47:161,48:168,49:169,50:170,51:171,52:172,53:173,54:174,55:175,56:176,57:$VY,59:$Va,60:$Vb,62:$VZ,66:$V_,73:$V$,74:$V01,75:$V11,77:188,78:189,81:$V21,82:$V31,83:$V41},{7:159,9:160,13:162,14:163,15:164,16:165,17:166,18:167,20:$VX,25:[1,344],27:158,29:157,32:178,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,46:215,47:161,48:168,49:169,50:170,51:171,52:172,53:173,54:174,55:175,56:176,57:$VY,59:$Va,60:$Vb,62:$VZ,66:$V_,73:$V$,74:$V01,75:$V11,77:188,78:189,81:$V21,82:$V31,83:$V41},o($V91,[2,90]),o($V91,[2,73]),{22:[1,345],34:$VD,35:$VE,84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,96:$VQ},{7:159,9:160,13:162,14:163,15:164,16:165,17:166,18:167,20:$VX,25:[1,346],27:158,29:157,32:178,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,46:215,47:161,48:168,49:169,50:170,51:171,52:172,53:173,54:174,55:175,56:176,57:$VY,59:$Va,60:$Vb,62:$VZ,66:$V_,73:$V$,74:$V01,75:$V11,77:188,78:189,81:$V21,82:$V31,83:$V41},o($V91,[2,89]),{23:[1,347]},o($V91,[2,75]),{7:159,9:160,13:162,14:163,15:164,16:165,17:166,18:167,20:$VX,24:348,27:158,29:157,32:178,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,46:156,47:161,48:168,49:169,50:170,51:171,52:172,53:173,54:174,55:175,56:176,57:$VY,59:$Va,60:$Vb,62:$VZ,66:$V_,73:$V$,74:$V01,75:$V11,77:188,78:189,81:$V21,82:$V31,83:$V41},{7:159,9:160,13:162,14:163,15:164,16:165,17:166,18:167,20:$VX,25:[1,349],27:158,29:157,32:178,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,46:215,47:161,48:168,49:169,50:170,51:171,52:172,53:173,54:174,55:175,56:176,57:$VY,59:$Va,60:$Vb,62:$VZ,66:$V_,73:$V$,74:$V01,75:$V11,77:188,78:189,81:$V21,82:$V31,83:$V41},o($Vj1,[2,78])],
defaultActions: {28:[2,1],254:[2,91],255:[2,92]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

        const TIPO_OPERACION= require('../controladores/Enums/TipoOperacion');
        const TIPO_VALOR = require('../controladores/Enums/TipoValor');
        const TIPO_DATO= require('../controladores/Enums/TipoDato');
        const INSTRUCCION = require('../controladores/Instruccion/Instruccion');     

        let respuesta = {
                LIns: [],
                err: ""
        };
              
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1://comentario lineal
break;
case 2:// comentario multiple líneas   
break;
case 3:return 38
break;
case 4:return 39
break;
case 5:return 41
break;
case 6:return 40
break;
case 7:return 42
break;
case 8:return 43
break;
case 9:return 62
break;
case 10:return 63
break;
case 11:return 66
break;
case 12:return 70
break;
case 13:return 74
break;
case 14:return 73
break;
case 15:return 75
break;
case 16:return 81
break;
case 17:return 82
break;
case 18:return 83
break;
case 19:return 72
break;
case 20:return 19
break;
case 21:return 58
break;
case 22:return 59
break;
case 23:return 60
break;
case 24:return 57
break;
case 25:return 99
break;
case 26:return 100
break;
case 27:return 36
break;
case 28:return 110
break;
case 29:return 61
break;
case 30:return 104
break;
case 31:return 103
break;
case 32:return 105
break;
case 33:return 106
break;
case 34:return 107
break;
case 35:return 108
break;
case 36:return 109
break;
case 37:return 97
break;
case 38:return 'punto'
break;
case 39:return 98
break;
case 40:return 96       
break;
case 41:return 92
break;
case 42:return 90
break;
case 43:return 34
break;
case 44:return 91
break;
case 45:return 37
break;
case 46:return 35
break;
case 47:return 30
break;
case 48:return 8
break;
case 49:return 71
break;
case 50:return 94
break;
case 51:return 93
break;
case 52:return 23
break;
case 53:return 25
break;
case 54:return 86
break;
case 55:return 87
break;
case 56:return 80
break;
case 57:return 79   
break;
case 58:return 85
break;
case 59:return 84
break;
case 60:return 88
break;
case 61:return 95
break;
case 62:return 89
break;
case 63:return 21
break;
case 64:return 22
break;
case 65:return 44
break;
case 66:return 45
break;
case 67:return 20
break;
case 68:return 101
break;
case 69:return 102
break;
case 70:return 5
break;
case 71: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:list\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:do\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:default\b)/i,/^(?:void\b)/i,/^(?:new\b)/i,/^(?:append\b)/i,/^(?:setvalue\b)/i,/^(?:print\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:main\b)/i,/^(?:getvalue\b)/i,/^(?:tochararray\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:length\b)/i,/^(?:truncate\b)/i,/^(?:round\b)/i,/^(?:typeof\b)/i,/^(?:tostring\b)/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:\.)/i,/^(?:[0-9]+\b)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:=)/i,/^(?:>)/i,/^(?:,)/i,/^(?:;)/i,/^(?::)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:--)/i,/^(?:\+\+)/i,/^(?:-)/i,/^(?:\+)/i,/^(?:\^)/i,/^(?:!)/i,/^(?:%)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:([a-zA-Z])([a-zA-Z0-9_])*)/i,/^(?:["\""]([^"\""])*["\""])/i,/^(?:["\'"]([^"\'"])*["\'"])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}