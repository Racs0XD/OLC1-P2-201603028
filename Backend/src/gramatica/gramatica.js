/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,11],$V1=[1,10],$V2=[1,12],$V3=[1,13],$V4=[1,14],$V5=[1,15],$V6=[1,16],$V7=[1,17],$V8=[5,12,13,19,23,24,25,26,27],$V9=[1,37],$Va=[1,31],$Vb=[1,29],$Vc=[1,30],$Vd=[1,32],$Ve=[1,33],$Vf=[1,34],$Vg=[1,35],$Vh=[1,36],$Vi=[1,38],$Vj=[1,42],$Vk=[1,43],$Vl=[1,44],$Vm=[1,45],$Vn=[1,46],$Vo=[1,47],$Vp=[1,48],$Vq=[1,49],$Vr=[1,50],$Vs=[1,51],$Vt=[1,52],$Vu=[1,53],$Vv=[1,54],$Vw=[1,55],$Vx=[6,15,48,54,55,56,57,58,59,60,61,62,63,64,65,66,68],$Vy=[6,15,48,65,66],$Vz=[6,15,48,54,55,60,61,62,63,64,65,66,68],$VA=[6,15,48,54,55,56,57,59,60,61,62,63,64,65,66,68],$VB=[6,15,48,60,61,62,63,64,65,66,68],$VC=[1,89],$VD=[1,90],$VE=[1,91],$VF=[1,92],$VG=[1,93],$VH=[1,94],$VI=[1,95],$VJ=[13,18,23,24,25,26,27,38,39,43,50,51,52,53],$VK=[13,18,23,24,25,26,27,38,39,43,47,49,50,51,52,53],$VL=[1,134],$VM=[1,133],$VN=[18,47,49],$VO=[1,154],$VP=[13,18,23,24,25,26,27,38,39,40,43,47,49,50,51,52,53];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"OPCIONESCUERPO":4,"EOF":5,"ptcoma":6,"CUERPO":7,"DEC_VAR":8,"ASIG_VAR":9,"METODOS":10,"MAIN":11,"Rvoid":12,"identificador":13,"parA":14,"parC":15,"llaveA":16,"INSTRUCCIONES":17,"llaveC":18,"Rmain":19,"TIPO":20,"igual":21,"EXPRESION":22,"Rint":23,"Rdouble":24,"Rchar":25,"Rboolean":26,"Rstring":27,"INSTRUCCION":28,"PRINT":29,"IF":30,"SWITCH":31,"WHILE":32,"BREAK":33,"CONTINUE":34,"RETURN":35,"OPCIONESMETODO":36,"CUERPOMETODO":37,"Rprint":38,"Rif":39,"Relse":40,"ELSEIFS":41,"CONELSEIF":42,"Rswitch":43,"CSWITCH":44,"DEF":45,"CONSWITCH":46,"Rcase":47,"dospuntos":48,"Rdefault":49,"Rwhile":50,"Rbreak":51,"Rcontinue":52,"Rreturn":53,"suma":54,"menos":55,"multi":56,"div":57,"exponente":58,"modulo":59,"menor":60,"mayor":61,"menorIgual":62,"mayorIgual":63,"diferente":64,"and":65,"or":66,"not":67,"igualigual":68,"decimal":69,"entero":70,"Rtrue":71,"Rfalse":72,"string":73,"char":74,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",6:"ptcoma",12:"Rvoid",13:"identificador",14:"parA",15:"parC",16:"llaveA",18:"llaveC",19:"Rmain",21:"igual",23:"Rint",24:"Rdouble",25:"Rchar",26:"Rboolean",27:"Rstring",38:"Rprint",39:"Rif",40:"Relse",43:"Rswitch",47:"Rcase",48:"dospuntos",49:"Rdefault",50:"Rwhile",51:"Rbreak",52:"Rcontinue",53:"Rreturn",54:"suma",55:"menos",56:"multi",57:"div",58:"exponente",59:"modulo",60:"menor",61:"mayor",62:"menorIgual",63:"mayorIgual",64:"diferente",65:"and",66:"or",67:"not",68:"igualigual",69:"decimal",70:"entero",71:"Rtrue",72:"Rfalse",73:"string",74:"char"},
productions_: [0,[3,2],[3,2],[3,0],[4,2],[4,1],[7,2],[7,2],[7,1],[7,1],[10,7],[11,5],[8,2],[8,4],[9,3],[20,1],[20,1],[20,1],[20,1],[20,1],[17,2],[17,1],[28,2],[28,2],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[36,2],[36,1],[37,2],[37,2],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[29,5],[30,7],[30,11],[30,8],[30,12],[41,2],[41,1],[42,8],[31,8],[31,7],[31,7],[44,2],[44,1],[46,4],[45,3],[32,7],[33,2],[34,2],[35,2],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,2],[22,2],[22,3],[22,3],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
respuesta.err = ""; respuesta.LIns = $$[$0-1]; return respuesta;
break;
case 2:
 respuesta.err  =  "Error Sintactico: " + "Linea: "  + (this._$.first_line-1) + ", Columna: " + this._$.first_column ; return respuesta; 
break;
case 4: case 31: case 53:
$$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 5: case 32: case 48: case 54:
this.$=[$$[$0]];
break;
case 6: case 7: case 22: case 23: case 34:
this.$=$$[$0-1];
break;
case 8: case 9: case 24: case 25: case 35:
this.$=$$[$0];
break;
case 10:
this.$ = INSTRUCCION.nuevoMetodo($$[$0-5], null, $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 11:
this.$ = INSTRUCCION.nuevoMain($$[$0-3], null, this._$.first_line,this._$.first_column+1)
break;
case 12:
this.$= INSTRUCCION.nuevaDeclaracion($$[$0],null, $$[$0-1],this._$.first_line, this._$.first_column+1)
break;
case 13:
this.$= INSTRUCCION.nuevaDeclaracion($$[$0-2], $$[$0], $$[$0-3],this._$.first_line, this._$.first_column+1);

        
break;
case 14:
this.$ = INSTRUCCION.nuevaAsignacion($$[$0-2], $$[$0],this._$.first_line, this._$.first_column+1)
break;
case 15:
this.$= TIPO_DATO.ENTERO
break;
case 16:
this.$= TIPO_DATO.DECIMAL
break;
case 17:
this.$= TIPO_DATO.CHAR
break;
case 18:
this.$= TIPO_DATO.BOOL
break;
case 19:
this.$= TIPO_DATO.CADENA
break;
case 20:
this.$ = $$[$0-1]; $$[$0-1].push($$[$0]);
break;
case 21:
this.$ = [$$[$0]];
break;
case 26: case 27: case 28: case 29: case 30: case 36: case 37: case 38: case 39: case 40: case 41:
this.$=$$[$0]
break;
case 33: case 76:
this.$=$$[$0-1]
break;
case 42:
this.$ = INSTRUCCION.nuevoPrint($$[$0-2], this._$.first_line,this._$.first_column+1)
break;
case 43:
this.$ = new INSTRUCCION.nuevoIf($$[$0-4], $$[$0-1] , this._$.first_line,this._$.first_column+1)
break;
case 44:
this.$ = new INSTRUCCION.nuevoIfElse($$[$0-8], $$[$0-5], $$[$0-1] , this._$.first_line,this._$.first_column+1)
break;
case 45:
this.$ = new INSTRUCCION.nuevoIfElseIf($$[$0-5], $$[$0-2],$$[$0],null,this._$.first_line, this._$.first_column+1)
break;
case 46:
this.$ = new INSTRUCCION.nuevoIfElseIf($$[$0-9], $$[$0-6],$$[$0-4],$$[$0-1],this._$.first_line, this._$.first_column+1)
break;
case 47:
$$[$0-1].push($$[$0]); this.$=$$[$0-1]
break;
case 49:
this.$ = new INSTRUCCION.nuevoElseIf($$[$0-4], $$[$0-1],this._$.first_line, this._$.first_column+1)
break;
case 50:
this.$= new INSTRUCCION.nuevoSwitch($$[$0-5], $$[$0-2], $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 51:
this.$= new INSTRUCCION.nuevoSwitch($$[$0-4], $$[$0-1], null, this._$.first_line,this._$.first_column+1)
break;
case 52:
this.$= new INSTRUCCION.nuevoSwitch($$[$0-4], null, $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 55:
this.$ = new INSTRUCCION.nuevoCase($$[$0-2], $$[$0] , this._$.first_line,this._$.first_column+1) 
break;
case 56:
this.$ = $$[$0]
break;
case 57:
this.$ = new INSTRUCCION.nuevoWhile($$[$0-4], $$[$0-1] , this._$.first_line,this._$.first_column+1)
break;
case 58:
this.$ = new INSTRUCCION.nuevoBreak(this._$.first_line,this._$.first_column+1)
break;
case 59:
this.$ = new INSTRUCCION.nuevoContinue(this._$.first_line,this._$.first_column+1)
break;
case 60:
this.$ = new INSTRUCCION.nuevoReturn(this._$.first_line,this._$.first_column+1)
break;
case 61:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.SUMA,this._$.first_line, this._$.first_column+1);
break;
case 62:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.RESTA,this._$.first_line, this._$.first_column+1);
break;
case 63:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MULTIPLICACION,this._$.first_line, this._$.first_column+1);
break;
case 64:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.DIVISION,this._$.first_line, this._$.first_column+1);
break;
case 65:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.POTENCIA,this._$.first_line, this._$.first_column+1);
break;
case 66:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MODULO,this._$.first_line, this._$.first_column+1);
break;
case 67:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MENOR,this._$.first_line, this._$.first_column+1);
break;
case 68:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MAYOR,this._$.first_line, this._$.first_column+1);
break;
case 69:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MENORIGUAL,this._$.first_line, this._$.first_column+1);
break;
case 70:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MAYORIGUAL,this._$.first_line, this._$.first_column+1);
break;
case 71:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.DIFERENTE,this._$.first_line, this._$.first_column+1);
break;
case 72:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.AND,this._$.first_line, this._$.first_column+1);
break;
case 73:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.OR,this._$.first_line, this._$.first_column+1);
break;
case 74:
this.$= INSTRUCCION.nuevaOperacionUnaria($$[$0], TIPO_OPERACION.UNARIA,this._$.first_line, this._$.first_column+1);
break;
case 75:
this.$= INSTRUCCION.nuevaOperacionBinaria(null,$$[$0], TIPO_OPERACION.NOT,this._$.first_line, this._$.first_column+1);
break;
case 77:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.IGUALIGUAL,this._$.first_line, this._$.first_column+1);
break;
case 78:
this.$= INSTRUCCION.nuevoValor(Number($$[$0]),TIPO_VALOR.DECIMAL,this._$.first_line, this._$.first_column+1);
break;
case 79:
this.$= INSTRUCCION.nuevoValor(Number($$[$0]),TIPO_VALOR.ENTERO,this._$.first_line, this._$.first_column+1);
break;
case 80: case 81:
this.$= INSTRUCCION.nuevoValor($$[$0],TIPO_VALOR.BOOL,this._$.first_line, this._$.first_column+1);
break;
case 82:
this.$= INSTRUCCION.nuevoValor($$[$0],TIPO_VALOR.CADENA,this._$.first_line, this._$.first_column+1);
break;
case 83:
this.$= INSTRUCCION.nuevoValor($$[$0],TIPO_VALOR.IDENTIFICADOR,this._$.first_line, this._$.first_column+1);
break;
case 84:
this.$= INSTRUCCION.nuevoValor($$[$0],TIPO_VALOR.CHAR,this._$.first_line, this._$.first_column+1);
break;
}
},
table: [{1:[2,3],2:[1,3],3:1,4:2,7:4,8:5,9:6,10:7,11:8,12:$V0,13:$V1,19:$V2,20:9,23:$V3,24:$V4,25:$V5,26:$V6,27:$V7},{1:[3]},{5:[1,18],7:19,8:5,9:6,10:7,11:8,12:$V0,13:$V1,19:$V2,20:9,23:$V3,24:$V4,25:$V5,26:$V6,27:$V7},{6:[1,20]},o($V8,[2,5]),{6:[1,21]},{6:[1,22]},o($V8,[2,8]),o($V8,[2,9]),{13:[1,23]},{21:[1,24]},{13:[1,25]},{13:[1,26]},{13:[2,15]},{13:[2,16]},{13:[2,17]},{13:[2,18]},{13:[2,19]},{1:[2,1]},o($V8,[2,4]),{1:[2,2]},o($V8,[2,6]),o($V8,[2,7]),{6:[2,12],21:[1,27]},{13:$V9,14:$Va,22:28,55:$Vb,67:$Vc,69:$Vd,70:$Ve,71:$Vf,72:$Vg,73:$Vh,74:$Vi},{14:[1,39]},{14:[1,40]},{13:$V9,14:$Va,22:41,55:$Vb,67:$Vc,69:$Vd,70:$Ve,71:$Vf,72:$Vg,73:$Vh,74:$Vi},{6:[2,14],54:$Vj,55:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,68:$Vw},{13:$V9,14:$Va,22:56,55:$Vb,67:$Vc,69:$Vd,70:$Ve,71:$Vf,72:$Vg,73:$Vh,74:$Vi},{13:$V9,14:$Va,22:57,55:$Vb,67:$Vc,69:$Vd,70:$Ve,71:$Vf,72:$Vg,73:$Vh,74:$Vi},{13:$V9,14:$Va,22:58,55:$Vb,67:$Vc,69:$Vd,70:$Ve,71:$Vf,72:$Vg,73:$Vh,74:$Vi},o($Vx,[2,78]),o($Vx,[2,79]),o($Vx,[2,80]),o($Vx,[2,81]),o($Vx,[2,82]),o($Vx,[2,83]),o($Vx,[2,84]),{15:[1,59]},{15:[1,60]},{6:[2,13],54:$Vj,55:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,68:$Vw},{13:$V9,14:$Va,22:61,55:$Vb,67:$Vc,69:$Vd,70:$Ve,71:$Vf,72:$Vg,73:$Vh,74:$Vi},{13:$V9,14:$Va,22:62,55:$Vb,67:$Vc,69:$Vd,70:$Ve,71:$Vf,72:$Vg,73:$Vh,74:$Vi},{13:$V9,14:$Va,22:63,55:$Vb,67:$Vc,69:$Vd,70:$Ve,71:$Vf,72:$Vg,73:$Vh,74:$Vi},{13:$V9,14:$Va,22:64,55:$Vb,67:$Vc,69:$Vd,70:$Ve,71:$Vf,72:$Vg,73:$Vh,74:$Vi},{13:$V9,14:$Va,22:65,55:$Vb,67:$Vc,69:$Vd,70:$Ve,71:$Vf,72:$Vg,73:$Vh,74:$Vi},{13:$V9,14:$Va,22:66,55:$Vb,67:$Vc,69:$Vd,70:$Ve,71:$Vf,72:$Vg,73:$Vh,74:$Vi},{13:$V9,14:$Va,22:67,55:$Vb,67:$Vc,69:$Vd,70:$Ve,71:$Vf,72:$Vg,73:$Vh,74:$Vi},{13:$V9,14:$Va,22:68,55:$Vb,67:$Vc,69:$Vd,70:$Ve,71:$Vf,72:$Vg,73:$Vh,74:$Vi},{13:$V9,14:$Va,22:69,55:$Vb,67:$Vc,69:$Vd,70:$Ve,71:$Vf,72:$Vg,73:$Vh,74:$Vi},{13:$V9,14:$Va,22:70,55:$Vb,67:$Vc,69:$Vd,70:$Ve,71:$Vf,72:$Vg,73:$Vh,74:$Vi},{13:$V9,14:$Va,22:71,55:$Vb,67:$Vc,69:$Vd,70:$Ve,71:$Vf,72:$Vg,73:$Vh,74:$Vi},{13:$V9,14:$Va,22:72,55:$Vb,67:$Vc,69:$Vd,70:$Ve,71:$Vf,72:$Vg,73:$Vh,74:$Vi},{13:$V9,14:$Va,22:73,55:$Vb,67:$Vc,69:$Vd,70:$Ve,71:$Vf,72:$Vg,73:$Vh,74:$Vi},{13:$V9,14:$Va,22:74,55:$Vb,67:$Vc,69:$Vd,70:$Ve,71:$Vf,72:$Vg,73:$Vh,74:$Vi},o($Vx,[2,74]),o($Vy,[2,75],{54:$Vj,55:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,68:$Vw}),{15:[1,75],54:$Vj,55:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,68:$Vw},{16:[1,76]},{6:[1,77]},o($Vz,[2,61],{56:$Vl,57:$Vm,58:$Vn,59:$Vo}),o($Vz,[2,62],{56:$Vl,57:$Vm,58:$Vn,59:$Vo}),o($VA,[2,63],{58:$Vn}),o($VA,[2,64],{58:$Vn}),o($VA,[2,65]),o($VA,[2,66],{58:$Vn}),o($VB,[2,67],{54:$Vj,55:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo}),o($VB,[2,68],{54:$Vj,55:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo}),o($VB,[2,69],{54:$Vj,55:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo}),o($VB,[2,70],{54:$Vj,55:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo}),o($VB,[2,71],{54:$Vj,55:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo}),o($Vy,[2,72],{54:$Vj,55:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,68:$Vw}),o([6,15,48,66],[2,73],{54:$Vj,55:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,68:$Vw}),o($VB,[2,77],{54:$Vj,55:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo}),o($Vx,[2,76]),{8:80,9:81,13:$V1,17:78,20:9,23:$V3,24:$V4,25:$V5,26:$V6,27:$V7,28:79,29:82,30:83,31:84,32:85,33:86,34:87,35:88,38:$VC,39:$VD,43:$VE,50:$VF,51:$VG,52:$VH,53:$VI},o($V8,[2,11]),{8:80,9:81,13:$V1,18:[1,96],20:9,23:$V3,24:$V4,25:$V5,26:$V6,27:$V7,28:97,29:82,30:83,31:84,32:85,33:86,34:87,35:88,38:$VC,39:$VD,43:$VE,50:$VF,51:$VG,52:$VH,53:$VI},o($VJ,[2,21]),{6:[1,98]},{6:[1,99]},o($VJ,[2,24]),o($VJ,[2,25]),o($VJ,[2,26]),o($VJ,[2,27]),o($VJ,[2,28]),o($VJ,[2,29]),o($VJ,[2,30]),{14:[1,100]},{14:[1,101]},{14:[1,102]},{14:[1,103]},{6:[1,104]},{6:[1,105]},{6:[1,106]},o($V8,[2,10]),o($VJ,[2,20]),o($VJ,[2,22]),o($VJ,[2,23]),{13:$V9,14:$Va,22:107,55:$Vb,67:$Vc,69:$Vd,70:$Ve,71:$Vf,72:$Vg,73:$Vh,74:$Vi},{13:$V9,14:$Va,22:108,55:$Vb,67:$Vc,69:$Vd,70:$Ve,71:$Vf,72:$Vg,73:$Vh,74:$Vi},{13:$V9,14:$Va,22:109,55:$Vb,67:$Vc,69:$Vd,70:$Ve,71:$Vf,72:$Vg,73:$Vh,74:$Vi},{13:$V9,14:$Va,22:110,55:$Vb,67:$Vc,69:$Vd,70:$Ve,71:$Vf,72:$Vg,73:$Vh,74:$Vi},o($VK,[2,58]),o($VK,[2,59]),o($VK,[2,60]),{15:[1,111],54:$Vj,55:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,68:$Vw},{15:[1,112],54:$Vj,55:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,68:$Vw},{15:[1,113],54:$Vj,55:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,68:$Vw},{15:[1,114],54:$Vj,55:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,68:$Vw},{6:[1,115]},{16:[1,116]},{16:[1,117]},{16:[1,118]},o($VK,[2,42]),{8:121,9:122,13:$V1,20:9,23:$V3,24:$V4,25:$V5,26:$V6,27:$V7,29:123,30:124,31:125,32:126,33:127,34:128,35:129,36:119,37:120,38:$VC,39:$VD,43:$VE,50:$VF,51:$VG,52:$VH,53:$VI},{44:130,45:131,46:132,47:$VL,49:$VM},{8:121,9:122,13:$V1,20:9,23:$V3,24:$V4,25:$V5,26:$V6,27:$V7,29:123,30:124,31:125,32:126,33:127,34:128,35:129,36:135,37:120,38:$VC,39:$VD,43:$VE,50:$VF,51:$VG,52:$VH,53:$VI},{8:121,9:122,13:$V1,18:[1,136],20:9,23:$V3,24:$V4,25:$V5,26:$V6,27:$V7,29:123,30:124,31:125,32:126,33:127,34:128,35:129,37:137,38:$VC,39:$VD,43:$VE,50:$VF,51:$VG,52:$VH,53:$VI},o($VK,[2,32]),{6:[1,138]},{6:[1,139]},o($VK,[2,35]),o($VK,[2,36]),o($VK,[2,37]),o($VK,[2,38]),o($VK,[2,39]),o($VK,[2,40]),o($VK,[2,41]),{18:[1,141],45:140,46:142,47:$VL,49:$VM},{18:[1,143]},o($VN,[2,54]),{48:[1,144]},{13:$V9,14:$Va,22:145,55:$Vb,67:$Vc,69:$Vd,70:$Ve,71:$Vf,72:$Vg,73:$Vh,74:$Vi},{8:121,9:122,13:$V1,18:[1,146],20:9,23:$V3,24:$V4,25:$V5,26:$V6,27:$V7,29:123,30:124,31:125,32:126,33:127,34:128,35:129,37:137,38:$VC,39:$VD,43:$VE,50:$VF,51:$VG,52:$VH,53:$VI},o($VK,[2,43],{41:148,42:149,40:[1,147]}),o($VK,[2,31]),o($VK,[2,33]),o($VK,[2,34]),{18:[1,150]},o($VK,[2,51]),o($VN,[2,53]),o($VK,[2,52]),{8:121,9:122,13:$V1,20:9,23:$V3,24:$V4,25:$V5,26:$V6,27:$V7,29:123,30:124,31:125,32:126,33:127,34:128,35:129,36:151,37:120,38:$VC,39:$VD,43:$VE,50:$VF,51:$VG,52:$VH,53:$VI},{48:[1,152],54:$Vj,55:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,68:$Vw},o($VK,[2,57]),{16:[1,153],39:$VO},o($VK,[2,45],{42:156,40:[1,155]}),o($VP,[2,48]),o($VK,[2,50]),{8:121,9:122,13:$V1,18:[2,56],20:9,23:$V3,24:$V4,25:$V5,26:$V6,27:$V7,29:123,30:124,31:125,32:126,33:127,34:128,35:129,37:137,38:$VC,39:$VD,43:$VE,50:$VF,51:$VG,52:$VH,53:$VI},{8:121,9:122,13:$V1,20:9,23:$V3,24:$V4,25:$V5,26:$V6,27:$V7,29:123,30:124,31:125,32:126,33:127,34:128,35:129,36:157,37:120,38:$VC,39:$VD,43:$VE,50:$VF,51:$VG,52:$VH,53:$VI},{8:121,9:122,13:$V1,20:9,23:$V3,24:$V4,25:$V5,26:$V6,27:$V7,29:123,30:124,31:125,32:126,33:127,34:128,35:129,36:158,37:120,38:$VC,39:$VD,43:$VE,50:$VF,51:$VG,52:$VH,53:$VI},{14:[1,159]},{16:[1,160],39:$VO},o($VP,[2,47]),o($VN,[2,55],{20:9,8:121,9:122,29:123,30:124,31:125,32:126,33:127,34:128,35:129,37:137,13:$V1,23:$V3,24:$V4,25:$V5,26:$V6,27:$V7,38:$VC,39:$VD,43:$VE,50:$VF,51:$VG,52:$VH,53:$VI}),{8:121,9:122,13:$V1,18:[1,161],20:9,23:$V3,24:$V4,25:$V5,26:$V6,27:$V7,29:123,30:124,31:125,32:126,33:127,34:128,35:129,37:137,38:$VC,39:$VD,43:$VE,50:$VF,51:$VG,52:$VH,53:$VI},{13:$V9,14:$Va,22:162,55:$Vb,67:$Vc,69:$Vd,70:$Ve,71:$Vf,72:$Vg,73:$Vh,74:$Vi},{8:121,9:122,13:$V1,20:9,23:$V3,24:$V4,25:$V5,26:$V6,27:$V7,29:123,30:124,31:125,32:126,33:127,34:128,35:129,36:163,37:120,38:$VC,39:$VD,43:$VE,50:$VF,51:$VG,52:$VH,53:$VI},o($VK,[2,44]),{15:[1,164],54:$Vj,55:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,68:$Vw},{8:121,9:122,13:$V1,18:[1,165],20:9,23:$V3,24:$V4,25:$V5,26:$V6,27:$V7,29:123,30:124,31:125,32:126,33:127,34:128,35:129,37:137,38:$VC,39:$VD,43:$VE,50:$VF,51:$VG,52:$VH,53:$VI},{16:[1,166]},o($VK,[2,46]),{8:121,9:122,13:$V1,20:9,23:$V3,24:$V4,25:$V5,26:$V6,27:$V7,29:123,30:124,31:125,32:126,33:127,34:128,35:129,36:167,37:120,38:$VC,39:$VD,43:$VE,50:$VF,51:$VG,52:$VH,53:$VI},{8:121,9:122,13:$V1,18:[1,168],20:9,23:$V3,24:$V4,25:$V5,26:$V6,27:$V7,29:123,30:124,31:125,32:126,33:127,34:128,35:129,37:137,38:$VC,39:$VD,43:$VE,50:$VF,51:$VG,52:$VH,53:$VI},o($VP,[2,49])],
defaultActions: {13:[2,15],14:[2,16],15:[2,17],16:[2,18],17:[2,19],18:[2,1],20:[2,2]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

        const TIPO_OPERACION= require('../controladores/Enums/TipoOperacion');
        const TIPO_VALOR = require('../controladores/Enums/TipoValor');
        const TIPO_DATO= require('../controladores/Enums/TipoDato');
        const INSTRUCCION = require('../controladores/Instruccion/Instruccion');     

        let respuesta = {
                LIns: [],
                err: ""
        };
              
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1://comentario lineal
break;
case 2:// comentario multiple líneas   
break;
case 3:return 23
break;
case 4:return 24
break;
case 5:return 26
break;
case 6:return 25
break;
case 7:return 27
break;
case 8:return 39
break;
case 9:return 40
break;
case 10:return 43
break;
case 11:return 47
break;
case 12:return 51
break;
case 13:return 52
break;
case 14:return 53
break;
case 15:return 50
break;
case 16:return 49
break;
case 17:return 12
break;
case 18:return 38
break;
case 19:return 71
break;
case 20:return 72
break;
case 21:return 19
break;
case 22:return 69
break;
case 23:return 'punto'
break;
case 24:return 70
break;
case 25:return 68       
break;
case 26:return 64
break;
case 27:return 62
break;
case 28:return 60
break;
case 29:return 63
break;
case 30:return 21
break;
case 31:return 61
break;
case 32:return 'coma'
break;
case 33:return 6
break;
case 34:return 48
break;
case 35:return 66
break;
case 36:return 65
break;
case 37:return 16
break;
case 38:return 18
break;
case 39:return 56
break;
case 40:return 57
break;
case 41:return 'menosmenos'
break;
case 42:return 'masmas'   
break;
case 43:return 55
break;
case 44:return 54
break;
case 45:return 58
break;
case 46:return 67
break;
case 47:return 59
break;
case 48:return 14
break;
case 49:return 15
break;
case 50:return 'corchA'
break;
case 51:return 'corchC'
break;
case 52:return 13
break;
case 53:return 73
break;
case 54:return 74
break;
case 55:return 5
break;
case 56: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:while\b)/i,/^(?:default\b)/i,/^(?:void\b)/i,/^(?:print\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:main\b)/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:\.)/i,/^(?:[0-9]+\b)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:=)/i,/^(?:>)/i,/^(?:,)/i,/^(?:;)/i,/^(?::)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:--)/i,/^(?:\+\+)/i,/^(?:-)/i,/^(?:\+)/i,/^(?:\^)/i,/^(?:!)/i,/^(?:%)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:([a-zA-Z])([a-zA-Z0-9_])*)/i,/^(?:["\""]([^"\""])*["\""])/i,/^(?:["\'"]([^"\'"])*["\'"])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}