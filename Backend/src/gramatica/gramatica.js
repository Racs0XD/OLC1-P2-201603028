/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,17],$V1=[1,16],$V2=[1,18],$V3=[1,20],$V4=[1,21],$V5=[1,22],$V6=[1,23],$V7=[1,24],$V8=[1,19],$V9=[1,25],$Va=[5,19,20,36,38,39,40,41,42,43,44],$Vb=[1,31],$Vc=[1,32],$Vd=[1,33],$Ve=[1,34],$Vf=[2,40],$Vg=[20,22,34,35,38,39,40,41,42,43,44],$Vh=[2,32],$Vi=[1,39],$Vj=[1,59],$Vk=[1,45],$Vl=[1,46],$Vm=[1,47],$Vn=[1,50],$Vo=[1,51],$Vp=[1,43],$Vq=[1,44],$Vr=[1,48],$Vs=[1,49],$Vt=[1,52],$Vu=[1,53],$Vv=[1,54],$Vw=[1,55],$Vx=[1,56],$Vy=[1,57],$Vz=[1,58],$VA=[1,60],$VB=[1,65],$VC=[1,70],$VD=[1,83],$VE=[1,84],$VF=[1,77],$VG=[1,78],$VH=[1,79],$VI=[1,80],$VJ=[1,81],$VK=[1,82],$VL=[1,85],$VM=[1,86],$VN=[1,87],$VO=[1,88],$VP=[1,89],$VQ=[1,90],$VR=[8,22,25,30,34,35,45,72,90,91,92,93,94,95,96,97,98,99,100,102],$VS=[1,116],$VT=[22,30],$VU=[8,22,25,30,45,72,99,100],$VV=[1,155],$VW=[22,25,30],$VX=[1,180],$VY=[1,183],$VZ=[1,182],$V_=[1,184],$V$=[1,185],$V01=[1,186],$V11=[1,187],$V21=[1,188],$V31=[1,189],$V41=[1,190],$V51=[1,191],$V61=[8,22,25,30,34,35,45,72,90,91,96,97,98,99,100,102],$V71=[8,22,25,30,34,35,45,72,90,91,92,93,95,96,97,98,99,100,102],$V81=[8,22,25,30,34,35,45,72,96,97,98,99,100,102],$V91=[2,19],$Va1=[20,21,25,38,39,40,41,42,43,44,58,63,67,71,73,74,75,76,82,83,84],$Vb1=[1,229],$Vc1=[1,230],$Vd1=[1,231],$Ve1=[8,22],$Vf1=[8,20,21,22,25,30,34,35,38,39,40,41,42,43,44,45,58,63,67,71,72,73,74,75,76,82,83,84,90,91,92,93,94,95,96,97,98,99,100,102],$Vg1=[2,20],$Vh1=[5,19,20,21,25,36,38,39,40,41,42,43,44,58,63,67,71,73,74,75,76,82,83,84],$Vi1=[1,304],$Vj1=[1,303],$Vk1=[25,71,73],$Vl1=[1,335],$Vm1=[20,21,25,38,39,40,41,42,43,44,58,63,64,67,71,73,74,75,76,82,83,84];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"OPCIONESCUERPO":4,"EOF":5,"CUERPO":6,"DEC_VAR":7,"ptcoma":8,"ASIG_VAR":9,"METODOS":10,"FUNCIONES":11,"MAIN":12,"DEC_VECTOR":13,"ASIG_VECTOR":14,"DEC_LISTA":15,"ADD_LISTA":16,"ACCEDER_LISTA":17,"CHARARRAY":18,"Rvoid":19,"identificador":20,"parA":21,"parC":22,"llaveA":23,"INSTRUCCIONES":24,"llaveC":25,"LPARAMETROS":26,"LLAMADAMETODO":27,"LISTAVALORES":28,"LLAMADAFUNCION":29,"coma":30,"EXPRESION":31,"TIPO":32,"PARAMETROS":33,"menor":34,"mayor":35,"Rmain":36,"igual":37,"Rint":38,"Rdouble":39,"Rchar":40,"Rboolean":41,"Rstring":42,"Rlist":43,"corA":44,"corC":45,"INSTRUCCION":46,"PRINT":47,"CASTEO":48,"IF":49,"SWITCH":50,"WHILE":51,"DOWHILE":52,"FOR":53,"BREAK":54,"CONTINUE":55,"RETURN":56,"INSTRUCCIONFOR":57,"Rprint":58,"Rnew":59,"punto":60,"Radd":61,"Rtochararray":62,"Rif":63,"Relse":64,"ELSEIFS":65,"CONELSEIF":66,"Rswitch":67,"CSWITCH":68,"DEF":69,"CONSWITCH":70,"Rcase":71,"dospuntos":72,"Rdefault":73,"Rwhile":74,"Rdo":75,"Rfor":76,"CUERPOFOR":77,"INCREMENTO":78,"DECREMENTO":79,"masmas":80,"menosmenos":81,"Rbreak":82,"Rcontinue":83,"Rreturn":84,"VAL_CAST":85,"decimal":86,"entero":87,"string":88,"char":89,"suma":90,"menos":91,"multi":92,"div":93,"exponente":94,"modulo":95,"menorIgual":96,"mayorIgual":97,"diferente":98,"and":99,"or":100,"not":101,"igualigual":102,"Rtrue":103,"Rfalse":104,"Rtoupper":105,"Rtolower":106,"Rlength":107,"Rtruncate":108,"Rround":109,"Rtypeof":110,"Rtostring":111,"Rgetvalue":112,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"ptcoma",19:"Rvoid",20:"identificador",21:"parA",22:"parC",23:"llaveA",25:"llaveC",30:"coma",34:"menor",35:"mayor",36:"Rmain",37:"igual",38:"Rint",39:"Rdouble",40:"Rchar",41:"Rboolean",42:"Rstring",43:"Rlist",44:"corA",45:"corC",58:"Rprint",59:"Rnew",60:"punto",61:"Radd",62:"Rtochararray",63:"Rif",64:"Relse",67:"Rswitch",71:"Rcase",72:"dospuntos",73:"Rdefault",74:"Rwhile",75:"Rdo",76:"Rfor",80:"masmas",81:"menosmenos",82:"Rbreak",83:"Rcontinue",84:"Rreturn",86:"decimal",87:"entero",88:"string",89:"char",90:"suma",91:"menos",92:"multi",93:"div",94:"exponente",95:"modulo",96:"menorIgual",97:"mayorIgual",98:"diferente",99:"and",100:"or",101:"not",102:"igualigual",103:"Rtrue",104:"Rfalse",105:"Rtoupper",106:"Rtolower",107:"Rlength",108:"Rtruncate",109:"Rround",110:"Rtypeof",111:"Rtostring",112:"Rgetvalue"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[10,7],[10,8],[27,4],[27,5],[29,3],[29,4],[28,3],[28,1],[11,7],[11,8],[26,3],[26,1],[33,2],[33,5],[33,3],[12,5],[12,6],[7,2],[7,4],[9,3],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,2],[24,2],[24,1],[46,1],[46,1],[46,2],[46,2],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,2],[47,5],[13,11],[13,9],[14,7],[15,12],[16,7],[17,6],[18,11],[49,7],[49,11],[49,8],[49,12],[65,2],[65,1],[66,8],[50,8],[50,7],[50,7],[68,2],[68,1],[70,4],[69,3],[51,7],[52,9],[52,8],[53,11],[53,10],[77,1],[77,1],[57,1],[57,1],[78,2],[79,2],[54,2],[55,2],[56,2],[56,3],[48,4],[85,1],[85,1],[85,1],[85,1],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,2],[31,2],[31,3],[31,3],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,4],[31,4],[31,4],[31,4],[31,4],[31,4],[31,4],[31,4],[31,6],[31,1],[31,1],[31,1],[31,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
respuesta.err = ""; respuesta.LIns = $$[$0-1]; return respuesta;
break;
case 2: case 83:
$$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 3: case 26: case 78: case 84:
this.$=[$$[$0]];
break;
case 4: case 5: case 47:
this.$=$$[$0-1];
break;
case 6: case 7: case 8: case 45: case 48: case 92: case 93:
this.$=$$[$0];
break;
case 9: case 10: case 11: case 12: case 13: case 14: case 44: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 59: case 60: case 61: case 62: case 63: case 94: case 95: case 140: case 141: case 142:
this.$=$$[$0]
break;
case 15:
this.$ = INSTRUCCION.nuevoMetodo($$[$0-5], null, $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 16:
this.$ = INSTRUCCION.nuevoMetodo($$[$0-6], $$[$0-4], $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 17:
this.$ = INSTRUCCION.nuevaLlamada($$[$0-3], null, this._$.first_line,this._$.first_column+1)
break;
case 18:
this.$ = INSTRUCCION.nuevaLlamada($$[$0-4], $$[$0-2], this._$.first_line,this._$.first_column+1)
break;
case 19:
this.$ = INSTRUCCION.nuevaLlamadaFuncion($$[$0-2], null, this._$.first_line,this._$.first_column+1)
break;
case 20:
this.$ = INSTRUCCION.nuevaLlamadaFuncion($$[$0-3], $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 21:
$$[$0-2].push($$[$0]); this.$=$$[$0-2]
break;
case 22:
this.$=[$$[$0]]
break;
case 23:
this.$ = INSTRUCCION.nuevaFuncion($$[$0-6], $$[$0-5], null, $$[$0-1], $$[$0], this._$.first_line,this._$.first_column+1)
break;
case 24:
this.$ = INSTRUCCION.nuevaFuncion($$[$0-7], $$[$0-6], $$[$0-4], $$[$0-1], $$[$0], this._$.first_line,this._$.first_column+1)
break;
case 25:
$$[$0-2].push($$[$0]); this.$=$$[$0-2];
break;
case 27: case 29:
this.$ = INSTRUCCION.nuevaDeclaracion($$[$0], null, $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 28:
this.$ = INSTRUCCION.nuevaDeclaracion($$[$0], null, $$[$0-4], this._$.first_line,this._$.first_column+1)
break;
case 30:
this.$ = INSTRUCCION.nuevoMain($$[$0-3], null, this._$.first_line,this._$.first_column+1)
break;
case 31:
this.$ = INSTRUCCION.nuevoMain($$[$0-4], $$[$0-2], this._$.first_line,this._$.first_column+1)
break;
case 32:
this.$= INSTRUCCION.nuevaDeclaracion($$[$0],null, $$[$0-1],this._$.first_line, this._$.first_column+1)
break;
case 33:
this.$= INSTRUCCION.nuevaDeclaracion($$[$0-2], $$[$0], $$[$0-3],this._$.first_line, this._$.first_column+1)
break;
case 34:
this.$ = INSTRUCCION.nuevaAsignacion($$[$0-2], $$[$0],this._$.first_line, this._$.first_column+1)
break;
case 35:
this.$= TIPO_DATO.ENTERO
break;
case 36:
this.$= TIPO_DATO.DECIMAL
break;
case 37:
this.$= TIPO_DATO.CHAR
break;
case 38:
this.$= TIPO_DATO.BOOL
break;
case 39:
this.$= TIPO_DATO.CADENA
break;
case 40:
this.$ = TIPO_DATO.LISTA
break;
case 41:
this.$ = TIPO_DATO.VECTOR
break;
case 42:
this.$ = $$[$0-1]; $$[$0-1].push($$[$0]);
break;
case 43:
this.$ = [$$[$0]];
break;
case 46: case 64: case 122:
this.$=$$[$0-1]
break;
case 65:
this.$ = INSTRUCCION.nuevoPrint($$[$0-2], this._$.first_line,this._$.first_column+1)
break;
case 66:
this.$ = INSTRUCCION.nuevaDeclaracionVector($$[$0-10],$$[$0-7],$$[$0-4],$$[$0-2],this._$.first_line,this._$.first_column+1)
break;
case 67:
this.$ = INSTRUCCION.nuevaDeclaracionVector($$[$0-8],$$[$0-5],null,$$[$0-2],this._$.first_line,this._$.first_column+1)
break;
case 68:
this.$ = INSTRUCCION.nuevaAsignacionVector($$[$0-6], $$[$0-4], $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 69:
this.$ = INSTRUCCION.nuevaDeclaracionLista($$[$0-9],$$[$0-7],$$[$0-2],this._$.first_line,this._$.first_column+1)
break;
case 70:
this.$ = INSTRUCCION.nuevaAsignacionLista($$[$0-6], $$[$0-2], this._$.first_line,this._$.first_column+1)
break;
case 71:
this.$ = INSTRUCCION.nuevoAccesoLista($$[$0-5], $$[$0-2], this._$.first_line,this._$.first_column+1)
break;
case 72:
this.$ = INSTRUCCION.nuevoCharArray($$[$0-8], $$[$0-6], $$[$0-2], this._$.first_line,this._$.first_column+1)
break;
case 73:
this.$ = new INSTRUCCION.nuevoIf($$[$0-4], $$[$0-1] , this._$.first_line,this._$.first_column+1)
break;
case 74:
this.$ = new INSTRUCCION.nuevoIfElse($$[$0-8], $$[$0-5], $$[$0-1] , this._$.first_line,this._$.first_column+1)
break;
case 75:
this.$ = new INSTRUCCION.nuevoIfElseIf($$[$0-5], $$[$0-2],$$[$0],null,this._$.first_line, this._$.first_column+1)
break;
case 76:
this.$ = new INSTRUCCION.nuevoIfElseIf($$[$0-9], $$[$0-6],$$[$0-4],$$[$0-1],this._$.first_line, this._$.first_column+1)
break;
case 77:
$$[$0-1].push($$[$0]); this.$=$$[$0-1]
break;
case 79:
this.$ = new INSTRUCCION.nuevoElseIf($$[$0-4], $$[$0-1],this._$.first_line, this._$.first_column+1)
break;
case 80:
this.$= new INSTRUCCION.nuevoSwitch($$[$0-5], $$[$0-2], $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 81:
this.$= new INSTRUCCION.nuevoSwitch($$[$0-4], $$[$0-1], null, this._$.first_line,this._$.first_column+1)
break;
case 82:
this.$= new INSTRUCCION.nuevoSwitch($$[$0-4], null, $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 85:
this.$ = new INSTRUCCION.nuevoCase($$[$0-2], $$[$0] , this._$.first_line,this._$.first_column+1) 
break;
case 86:
this.$ = $$[$0]
break;
case 87:
this.$ = new INSTRUCCION.nuevoWhile($$[$0-4], $$[$0-1] , this._$.first_line,this._$.first_column+1)
break;
case 88:
this.$ = new INSTRUCCION.nuevoDoWhile($$[$0-2], $$[$0-6] , this._$.first_line,this._$.first_column+1)
break;
case 89:
this.$ = new INSTRUCCION.nuevoDoWhile($$[$0-2], [] , this._$.first_line,(this._$.first_column+1));
break;
case 90:
this.$ = new INSTRUCCION.nuevoFor($$[$0-8], $$[$0-6], $$[$0-4], $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 91:
this.$ = new INSTRUCCION.nuevoFor($$[$0-7], $$[$0-5], $$[$0-3], $$[$0], this._$.first_line,this._$.first_column+1)
break;
case 96:
this.$= INSTRUCCION.nuevoIncremento($$[$0-1],this._$.first_line,this._$.first_column+1)
break;
case 97:
this.$= INSTRUCCION.nuevoDecremento($$[$0-1],this._$.first_line,this._$.first_column+1)
break;
case 98:
this.$ = new INSTRUCCION.nuevoBreak(this._$.first_line,this._$.first_column+1)
break;
case 99:
this.$ = new INSTRUCCION.nuevoContinue(this._$.first_line,this._$.first_column+1)
break;
case 100:
this.$ = new INSTRUCCION.nuevoReturn(this._$.first_line,this._$.first_column+1)
break;
case 101:
this.$ = new INSTRUCCION.nuevoReturn($$[$0-1],this._$.first_line,this._$.first_column+1)
break;
case 102:
this.$= INSTRUCCION.nuevoCasteo($$[$0-2],$$[$0],this._$.first_line, this._$.first_column+1);
break;
case 103: case 124:
this.$= INSTRUCCION.nuevoValor(Number($$[$0]),TIPO_VALOR.DECIMAL,this._$.first_line, this._$.first_column+1);
break;
case 104: case 125:
this.$= INSTRUCCION.nuevoValor(Number($$[$0]),TIPO_VALOR.ENTERO,this._$.first_line, this._$.first_column+1);
break;
case 105: case 128:
this.$= INSTRUCCION.nuevoValor($$[$0],TIPO_VALOR.CADENA,this._$.first_line, this._$.first_column+1);
break;
case 106: case 129:
this.$= INSTRUCCION.nuevoValor($$[$0],TIPO_VALOR.CHAR,this._$.first_line, this._$.first_column+1);
break;
case 107:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.SUMA,this._$.first_line, this._$.first_column+1);
break;
case 108:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.RESTA,this._$.first_line, this._$.first_column+1);
break;
case 109:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MULTIPLICACION,this._$.first_line, this._$.first_column+1);
break;
case 110:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.DIVISION,this._$.first_line, this._$.first_column+1);
break;
case 111:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.POTENCIA,this._$.first_line, this._$.first_column+1);
break;
case 112:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MODULO,this._$.first_line, this._$.first_column+1);
break;
case 113:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MENOR,this._$.first_line, this._$.first_column+1);
break;
case 114:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MAYOR,this._$.first_line, this._$.first_column+1);
break;
case 115:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MENORIGUAL,this._$.first_line, this._$.first_column+1);
break;
case 116:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MAYORIGUAL,this._$.first_line, this._$.first_column+1);
break;
case 117:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.DIFERENTE,this._$.first_line, this._$.first_column+1);
break;
case 118:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.AND,this._$.first_line, this._$.first_column+1);
break;
case 119:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.OR,this._$.first_line, this._$.first_column+1);
break;
case 120:
this.$= INSTRUCCION.nuevaOperacionUnaria($$[$0], TIPO_OPERACION.UNARIA,this._$.first_line, this._$.first_column+1);
break;
case 121:
this.$= INSTRUCCION.nuevaOperacionBinaria(null,$$[$0], TIPO_OPERACION.NOT,this._$.first_line, this._$.first_column+1);
break;
case 123:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.IGUALIGUAL,this._$.first_line, this._$.first_column+1);
break;
case 126: case 127:
this.$= INSTRUCCION.nuevoValor($$[$0],TIPO_VALOR.BOOL,this._$.first_line, this._$.first_column+1);
break;
case 130:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-1],$$[$0-1], TIPO_OPERACION.TOUPPER,this._$.first_line,this._$.first_column+1);
break;
case 131:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-1],$$[$0-1], TIPO_OPERACION.TOLOWER,this._$.first_line,this._$.first_column+1);
break;
case 132:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-1],$$[$0-1], TIPO_OPERACION.LENGTH,this._$.first_line,this._$.first_column+1);
break;
case 133:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-1],$$[$0-1], TIPO_OPERACION.TRUNCATE,this._$.first_line,this._$.first_column+1);
break;
case 134:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-1],$$[$0-1], TIPO_OPERACION.ROUND,this._$.first_line,this._$.first_column+1);
break;
case 135:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-1],$$[$0-1], TIPO_OPERACION.TYPEOF,this._$.first_line,this._$.first_column+1);
break;
case 136:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-1],$$[$0-1], TIPO_OPERACION.TOSTRING,this._$.first_line,this._$.first_column+1);
break;
case 137:
this.$ = INSTRUCCION.nuevoValorVector($$[$0-3],$$[$0-1], TIPO_VALOR.VECTOR, this._$.first_line,this._$.first_column+1)
break;
case 138:
this.$ = INSTRUCCION.nuevoValorLista($$[$0-3],$$[$0-1], TIPO_VALOR.LISTA, this._$.first_line,this._$.first_column+1)
break;
case 139:
this.$= INSTRUCCION.nuevoValor($$[$0],TIPO_VALOR.IDENTIFICADOR,this._$.first_line, this._$.first_column+1);
break;
}
},
table: [{3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V0,20:$V1,32:15,36:$V2,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9},{1:[3]},{5:[1,26],6:27,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V0,20:$V1,32:15,36:$V2,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9},o($Va,[2,3]),{8:[1,28]},{8:[1,29]},o($Va,[2,6]),o($Va,[2,7]),o($Va,[2,8]),o($Va,[2,9]),o($Va,[2,10]),o($Va,[2,11]),o($Va,[2,12]),o($Va,[2,13]),o($Va,[2,14]),{20:[1,30],44:$Vb},{37:$Vc,44:$Vd,60:$Ve},{20:[1,35]},{20:[1,36]},o([20,44],$Vf,{34:[1,37]}),o($Vg,[2,35]),o($Vg,[2,36]),o($Vg,[2,37]),o($Vg,[2,38]),o($Vg,[2,39]),{45:[1,38]},{1:[2,1]},o($Va,[2,2]),o($Va,[2,4]),o($Va,[2,5]),{8:$Vh,21:[1,40],37:$Vi},{45:[1,41]},{17:62,20:$Vj,21:$Vk,29:61,31:42,48:63,86:$Vl,87:$Vm,88:$Vn,89:$Vo,91:$Vp,101:$Vq,103:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA},{17:62,20:$Vj,21:$Vk,29:61,31:64,44:$VB,48:63,86:$Vl,87:$Vm,88:$Vn,89:$Vo,91:$Vp,101:$Vq,103:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA},{61:[1,66]},{21:[1,67]},{21:[1,68]},{32:69,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$VC,44:$V9},o($Vg,[2,41]),{17:62,20:$Vj,21:$Vk,29:61,31:71,48:63,86:$Vl,87:$Vm,88:$Vn,89:$Vo,91:$Vp,101:$Vq,103:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA},{22:[1,72],26:73,32:75,33:74,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$VC,44:$V9},{20:[1,76]},{8:[2,34],34:$VD,35:$VE,90:$VF,91:$VG,92:$VH,93:$VI,94:$VJ,95:$VK,96:$VL,97:$VM,98:$VN,99:$VO,100:$VP,102:$VQ},{17:62,20:$Vj,21:$Vk,29:61,31:91,48:63,86:$Vl,87:$Vm,88:$Vn,89:$Vo,91:$Vp,101:$Vq,103:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA},{17:62,20:$Vj,21:$Vk,29:61,31:92,48:63,86:$Vl,87:$Vm,88:$Vn,89:$Vo,91:$Vp,101:$Vq,103:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA},{17:62,20:$Vj,21:$Vk,29:61,31:93,32:94,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$VC,44:$V9,48:63,86:$Vl,87:$Vm,88:$Vn,89:$Vo,91:$Vp,101:$Vq,103:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA},o($VR,[2,124]),o($VR,[2,125]),o($VR,[2,126]),o($VR,[2,127]),o($VR,[2,128]),o($VR,[2,129]),{21:[1,95]},{21:[1,96]},{21:[1,97]},{21:[1,98]},{21:[1,99]},{21:[1,100]},{21:[1,101]},o($VR,[2,139],{21:[1,103],44:[1,102]}),{21:[1,104]},o($VR,[2,140]),o($VR,[2,141]),o($VR,[2,142]),{34:$VD,35:$VE,45:[1,105],90:$VF,91:$VG,92:$VH,93:$VI,94:$VJ,95:$VK,96:$VL,97:$VM,98:$VN,99:$VO,100:$VP,102:$VQ},{17:62,20:$Vj,21:$Vk,29:61,31:106,48:63,86:$Vl,87:$Vm,88:$Vn,89:$Vo,91:$Vp,101:$Vq,103:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA},{21:[1,107]},{22:[1,108],26:109,32:75,33:74,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$VC,44:$V9},{17:62,20:$Vj,21:$Vk,22:[1,110],28:111,29:61,31:112,48:63,86:$Vl,87:$Vm,88:$Vn,89:$Vo,91:$Vp,101:$Vq,103:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA},{35:[1,113]},o($Vg,$Vf),{8:[2,33],34:$VD,35:$VE,90:$VF,91:$VG,92:$VH,93:$VI,94:$VJ,95:$VK,96:$VL,97:$VM,98:$VN,99:$VO,100:$VP,102:$VQ},{23:[1,114]},{22:[1,115],30:$VS},o($VT,[2,26]),{20:[1,117],32:119,34:[1,118],38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$VC,44:$V9},{37:[1,120]},{17:62,20:$Vj,21:$Vk,29:61,31:121,48:63,86:$Vl,87:$Vm,88:$Vn,89:$Vo,91:$Vp,101:$Vq,103:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA},{17:62,20:$Vj,21:$Vk,29:61,31:122,48:63,86:$Vl,87:$Vm,88:$Vn,89:$Vo,91:$Vp,101:$Vq,103:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA},{17:62,20:$Vj,21:$Vk,29:61,31:123,48:63,86:$Vl,87:$Vm,88:$Vn,89:$Vo,91:$Vp,101:$Vq,103:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA},{17:62,20:$Vj,21:$Vk,29:61,31:124,48:63,86:$Vl,87:$Vm,88:$Vn,89:$Vo,91:$Vp,101:$Vq,103:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA},{17:62,20:$Vj,21:$Vk,29:61,31:125,48:63,86:$Vl,87:$Vm,88:$Vn,89:$Vo,91:$Vp,101:$Vq,103:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA},{17:62,20:$Vj,21:$Vk,29:61,31:126,48:63,86:$Vl,87:$Vm,88:$Vn,89:$Vo,91:$Vp,101:$Vq,103:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA},{17:62,20:$Vj,21:$Vk,29:61,31:127,48:63,86:$Vl,87:$Vm,88:$Vn,89:$Vo,91:$Vp,101:$Vq,103:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA},{17:62,20:$Vj,21:$Vk,29:61,31:128,48:63,86:$Vl,87:$Vm,88:$Vn,89:$Vo,91:$Vp,101:$Vq,103:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA},{17:62,20:$Vj,21:$Vk,29:61,31:129,48:63,86:$Vl,87:$Vm,88:$Vn,89:$Vo,91:$Vp,101:$Vq,103:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA},{17:62,20:$Vj,21:$Vk,29:61,31:130,48:63,86:$Vl,87:$Vm,88:$Vn,89:$Vo,91:$Vp,101:$Vq,103:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA},{17:62,20:$Vj,21:$Vk,29:61,31:131,48:63,86:$Vl,87:$Vm,88:$Vn,89:$Vo,91:$Vp,101:$Vq,103:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA},{17:62,20:$Vj,21:$Vk,29:61,31:132,48:63,86:$Vl,87:$Vm,88:$Vn,89:$Vo,91:$Vp,101:$Vq,103:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA},{17:62,20:$Vj,21:$Vk,29:61,31:133,48:63,86:$Vl,87:$Vm,88:$Vn,89:$Vo,91:$Vp,101:$Vq,103:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA},{17:62,20:$Vj,21:$Vk,29:61,31:134,48:63,86:$Vl,87:$Vm,88:$Vn,89:$Vo,91:$Vp,101:$Vq,103:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA},o($VR,[2,120]),o($VU,[2,121],{34:$VD,35:$VE,90:$VF,91:$VG,92:$VH,93:$VI,94:$VJ,95:$VK,96:$VL,97:$VM,98:$VN,102:$VQ}),{22:[1,135],34:$VD,35:$VE,90:$VF,91:$VG,92:$VH,93:$VI,94:$VJ,95:$VK,96:$VL,97:$VM,98:$VN,99:$VO,100:$VP,102:$VQ},{22:[1,136]},{17:62,20:$Vj,21:$Vk,29:61,31:137,48:63,86:$Vl,87:$Vm,88:$Vn,89:$Vo,91:$Vp,101:$Vq,103:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA},{17:62,20:$Vj,21:$Vk,29:61,31:138,48:63,86:$Vl,87:$Vm,88:$Vn,89:$Vo,91:$Vp,101:$Vq,103:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA},{17:62,20:$Vj,21:$Vk,29:61,31:139,48:63,86:$Vl,87:$Vm,88:$Vn,89:$Vo,91:$Vp,101:$Vq,103:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA},{17:62,20:$Vj,21:$Vk,29:61,31:140,48:63,86:$Vl,87:$Vm,88:$Vn,89:$Vo,91:$Vp,101:$Vq,103:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA},{17:62,20:$Vj,21:$Vk,29:61,31:141,48:63,86:$Vl,87:$Vm,88:$Vn,89:$Vo,91:$Vp,101:$Vq,103:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA},{17:62,20:$Vj,21:$Vk,29:61,31:142,48:63,86:$Vl,87:$Vm,88:$Vn,89:$Vo,91:$Vp,101:$Vq,103:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA},{17:62,20:$Vj,21:$Vk,29:61,31:143,48:63,86:$Vl,87:$Vm,88:$Vn,89:$Vo,91:$Vp,101:$Vq,103:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA},{17:62,20:$Vj,21:$Vk,29:61,31:144,44:$VB,48:63,86:$Vl,87:$Vm,88:$Vn,89:$Vo,91:$Vp,101:$Vq,103:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA},{17:62,20:$Vj,21:$Vk,22:[1,145],28:146,29:61,31:112,48:63,86:$Vl,87:$Vm,88:$Vn,89:$Vo,91:$Vp,101:$Vq,103:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA},{20:[1,147]},{37:[1,148]},{34:$VD,35:$VE,45:[1,149],90:$VF,91:$VG,92:$VH,93:$VI,94:$VJ,95:$VK,96:$VL,97:$VM,98:$VN,99:$VO,100:$VP,102:$VQ},{17:62,20:$Vj,21:$Vk,29:61,31:150,48:63,86:$Vl,87:$Vm,88:$Vn,89:$Vo,91:$Vp,101:$Vq,103:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA},{23:[1,151]},{22:[1,152],30:$VS},{8:[1,153]},{22:[1,154],30:$VV},o($VW,[2,22],{34:$VD,35:$VE,90:$VF,91:$VG,92:$VH,93:$VI,94:$VJ,95:$VK,96:$VL,97:$VM,98:$VN,99:$VO,100:$VP,102:$VQ}),{20:[1,156]},{7:161,9:162,13:164,14:165,15:166,16:167,17:168,18:169,20:$VX,21:$VY,24:157,27:160,29:159,32:181,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,46:158,47:163,48:170,49:171,50:172,51:173,52:174,53:175,54:176,55:177,56:178,57:179,58:$VZ,63:$V_,67:$V$,74:$V01,75:$V11,76:$V21,78:192,79:193,82:$V31,83:$V41,84:$V51},{23:[1,194]},{32:75,33:195,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$VC,44:$V9},o($VT,[2,27]),{32:196,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$VC,44:$V9},{20:[1,197]},{23:[1,199],59:[1,198]},o($V61,[2,107],{92:$VH,93:$VI,94:$VJ,95:$VK}),o($V61,[2,108],{92:$VH,93:$VI,94:$VJ,95:$VK}),o($V71,[2,109],{94:$VJ}),o($V71,[2,110],{94:$VJ}),o($V71,[2,111]),o($V71,[2,112],{94:$VJ}),o($V81,[2,113],{90:$VF,91:$VG,92:$VH,93:$VI,94:$VJ,95:$VK}),o($V81,[2,114],{90:$VF,91:$VG,92:$VH,93:$VI,94:$VJ,95:$VK}),o($V81,[2,115],{90:$VF,91:$VG,92:$VH,93:$VI,94:$VJ,95:$VK}),o($V81,[2,116],{90:$VF,91:$VG,92:$VH,93:$VI,94:$VJ,95:$VK}),o($V81,[2,117],{90:$VF,91:$VG,92:$VH,93:$VI,94:$VJ,95:$VK}),o($VU,[2,118],{34:$VD,35:$VE,90:$VF,91:$VG,92:$VH,93:$VI,94:$VJ,95:$VK,96:$VL,97:$VM,98:$VN,102:$VQ}),o([8,22,25,30,45,72,100],[2,119],{34:$VD,35:$VE,90:$VF,91:$VG,92:$VH,93:$VI,94:$VJ,95:$VK,96:$VL,97:$VM,98:$VN,99:$VO,102:$VQ}),o($V81,[2,123],{90:$VF,91:$VG,92:$VH,93:$VI,94:$VJ,95:$VK}),o($VR,[2,122]),{85:200,86:[1,201],87:[1,202],88:[1,203],89:[1,204]},{22:[1,205],34:$VD,35:$VE,90:$VF,91:$VG,92:$VH,93:$VI,94:$VJ,95:$VK,96:$VL,97:$VM,98:$VN,99:$VO,100:$VP,102:$VQ},{22:[1,206],34:$VD,35:$VE,90:$VF,91:$VG,92:$VH,93:$VI,94:$VJ,95:$VK,96:$VL,97:$VM,98:$VN,99:$VO,100:$VP,102:$VQ},{22:[1,207],34:$VD,35:$VE,90:$VF,91:$VG,92:$VH,93:$VI,94:$VJ,95:$VK,96:$VL,97:$VM,98:$VN,99:$VO,100:$VP,102:$VQ},{22:[1,208],34:$VD,35:$VE,90:$VF,91:$VG,92:$VH,93:$VI,94:$VJ,95:$VK,96:$VL,97:$VM,98:$VN,99:$VO,100:$VP,102:$VQ},{22:[1,209],34:$VD,35:$VE,90:$VF,91:$VG,92:$VH,93:$VI,94:$VJ,95:$VK,96:$VL,97:$VM,98:$VN,99:$VO,100:$VP,102:$VQ},{22:[1,210],34:$VD,35:$VE,90:$VF,91:$VG,92:$VH,93:$VI,94:$VJ,95:$VK,96:$VL,97:$VM,98:$VN,99:$VO,100:$VP,102:$VQ},{22:[1,211],34:$VD,35:$VE,90:$VF,91:$VG,92:$VH,93:$VI,94:$VJ,95:$VK,96:$VL,97:$VM,98:$VN,99:$VO,100:$VP,102:$VQ},{34:$VD,35:$VE,45:[1,212],90:$VF,91:$VG,92:$VH,93:$VI,94:$VJ,95:$VK,96:$VL,97:$VM,98:$VN,99:$VO,100:$VP,102:$VQ},o($VR,$V91),{22:[1,213],30:$VV},{30:[1,214]},{17:62,20:$Vj,21:$Vk,29:61,31:215,48:63,86:$Vl,87:$Vm,88:$Vn,89:$Vo,91:$Vp,101:$Vq,103:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA},{45:[1,216]},{22:[1,217],34:$VD,35:$VE,90:$VF,91:$VG,92:$VH,93:$VI,94:$VJ,95:$VK,96:$VL,97:$VM,98:$VN,99:$VO,100:$VP,102:$VQ},{7:161,9:162,13:164,14:165,15:166,16:167,17:168,18:169,20:$VX,21:$VY,24:218,27:160,29:159,32:181,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,46:158,47:163,48:170,49:171,50:172,51:173,52:174,53:175,54:176,55:177,56:178,57:179,58:$VZ,63:$V_,67:$V$,74:$V01,75:$V11,76:$V21,78:192,79:193,82:$V31,83:$V41,84:$V51},{23:[1,219]},o($Va,[2,30]),{8:[1,220]},{17:62,20:$Vj,21:$Vk,29:61,31:221,48:63,86:$Vl,87:$Vm,88:$Vn,89:$Vo,91:$Vp,101:$Vq,103:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA},{37:[1,222]},{7:161,9:162,13:164,14:165,15:166,16:167,17:168,18:169,20:$VX,21:$VY,25:[1,223],27:160,29:159,32:181,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,46:224,47:163,48:170,49:171,50:172,51:173,52:174,53:175,54:176,55:177,56:178,57:179,58:$VZ,63:$V_,67:$V$,74:$V01,75:$V11,76:$V21,78:192,79:193,82:$V31,83:$V41,84:$V51},o($Va1,[2,43]),o($Va1,[2,44]),o($Va1,[2,45]),{8:[1,225]},{8:[1,226]},o($Va1,[2,48]),o($Va1,[2,49]),o($Va1,[2,50]),o($Va1,[2,51]),o($Va1,[2,52]),o($Va1,[2,53]),o($Va1,[2,54]),o($Va1,[2,55]),o($Va1,[2,56]),o($Va1,[2,57]),o($Va1,[2,58]),o($Va1,[2,59]),o($Va1,[2,60]),o($Va1,[2,61]),o($Va1,[2,62]),o($Va1,[2,63]),{8:[1,227]},{21:[1,228],37:$Vc,44:$Vd,60:$Ve,80:$Vb1,81:$Vc1},{20:$Vd1,44:$Vb},{21:[1,232]},{32:94,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$VC,44:$V9},{21:[1,233]},{21:[1,234]},{21:[1,235]},{23:[1,236]},{21:[1,237]},{8:[1,238]},{8:[1,239]},{8:[1,240],17:62,20:$Vj,21:$Vk,29:61,31:241,48:63,86:$Vl,87:$Vm,88:$Vn,89:$Vo,91:$Vp,101:$Vq,103:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA},o($Ve1,[2,94]),o($Ve1,[2,95]),{7:161,9:162,13:164,14:165,15:166,16:167,17:168,18:169,20:$VX,21:$VY,24:242,27:160,29:159,32:181,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,46:158,47:163,48:170,49:171,50:172,51:173,52:174,53:175,54:176,55:177,56:178,57:179,58:$VZ,63:$V_,67:$V$,74:$V01,75:$V11,76:$V21,78:192,79:193,82:$V31,83:$V41,84:$V51},o($VT,[2,25]),{35:[1,243]},o($VT,[2,29]),{32:244,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$VC,44:$V9},{17:62,20:$Vj,21:$Vk,28:245,29:61,31:112,48:63,86:$Vl,87:$Vm,88:$Vn,89:$Vo,91:$Vp,101:$Vq,103:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA},o($Vf1,[2,102]),o($Vf1,[2,103]),o($Vf1,[2,104]),o($Vf1,[2,105]),o($Vf1,[2,106]),o($VR,[2,130]),o($VR,[2,131]),o($VR,[2,132]),o($VR,[2,133]),o($VR,[2,134]),o($VR,[2,135]),o($VR,[2,136]),o($VR,[2,137]),o($VR,$Vg1),{17:62,20:$Vj,21:$Vk,29:61,31:246,48:63,86:$Vl,87:$Vm,88:$Vn,89:$Vo,91:$Vp,101:$Vq,103:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA},{8:[1,247],34:$VD,35:$VE,90:$VF,91:$VG,92:$VH,93:$VI,94:$VJ,95:$VK,96:$VL,97:$VM,98:$VN,99:$VO,100:$VP,102:$VQ},o([5,8,19,20,21,22,25,30,34,35,36,38,39,40,41,42,43,44,45,58,63,67,71,72,73,74,75,76,82,83,84,90,91,92,93,94,95,96,97,98,99,100,102],[2,71]),{8:[1,248]},{7:161,9:162,13:164,14:165,15:166,16:167,17:168,18:169,20:$VX,21:$VY,25:[1,249],27:160,29:159,32:181,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,46:224,47:163,48:170,49:171,50:172,51:173,52:174,53:175,54:176,55:177,56:178,57:179,58:$VZ,63:$V_,67:$V$,74:$V01,75:$V11,76:$V21,78:192,79:193,82:$V31,83:$V41,84:$V51},{7:161,9:162,13:164,14:165,15:166,16:167,17:168,18:169,20:$VX,21:$VY,24:250,27:160,29:159,32:181,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,46:158,47:163,48:170,49:171,50:172,51:173,52:174,53:175,54:176,55:177,56:178,57:179,58:$VZ,63:$V_,67:$V$,74:$V01,75:$V11,76:$V21,78:192,79:193,82:$V31,83:$V41,84:$V51},o($Va,[2,31]),o($VW,[2,21],{34:$VD,35:$VE,90:$VF,91:$VG,92:$VH,93:$VI,94:$VJ,95:$VK,96:$VL,97:$VM,98:$VN,99:$VO,100:$VP,102:$VQ}),{59:[1,251],62:[1,252]},o($Va,[2,23]),o($Va1,[2,42]),o($Va1,[2,46]),o($Va1,[2,47]),o($Va1,[2,64]),{17:62,20:$Vj,21:$Vk,22:[1,253],28:254,29:61,31:112,48:63,86:$Vl,87:$Vm,88:$Vn,89:$Vo,91:$Vp,101:$Vq,103:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA},o($Ve1,[2,96]),o($Ve1,[2,97]),{8:$Vh,37:$Vi},{17:62,20:$Vj,21:$Vk,29:61,31:255,48:63,86:$Vl,87:$Vm,88:$Vn,89:$Vo,91:$Vp,101:$Vq,103:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA},{17:62,20:$Vj,21:$Vk,29:61,31:256,48:63,86:$Vl,87:$Vm,88:$Vn,89:$Vo,91:$Vp,101:$Vq,103:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA},{17:62,20:$Vj,21:$Vk,29:61,31:257,48:63,86:$Vl,87:$Vm,88:$Vn,89:$Vo,91:$Vp,101:$Vq,103:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA},{17:62,20:$Vj,21:$Vk,29:61,31:258,48:63,86:$Vl,87:$Vm,88:$Vn,89:$Vo,91:$Vp,101:$Vq,103:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA},{7:161,9:162,13:164,14:165,15:166,16:167,17:168,18:169,20:$VX,21:$VY,24:259,25:[1,260],27:160,29:159,32:181,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,46:158,47:163,48:170,49:171,50:172,51:173,52:174,53:175,54:176,55:177,56:178,57:179,58:$VZ,63:$V_,67:$V$,74:$V01,75:$V11,76:$V21,78:192,79:193,82:$V31,83:$V41,84:$V51},{7:262,9:263,20:[1,265],32:264,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$VC,44:$V9,77:261},o($Va1,[2,98]),o($Va1,[2,99]),o($Va1,[2,100]),{8:[1,266],34:$VD,35:$VE,90:$VF,91:$VG,92:$VH,93:$VI,94:$VJ,95:$VK,96:$VL,97:$VM,98:$VN,99:$VO,100:$VP,102:$VQ},{7:161,9:162,13:164,14:165,15:166,16:167,17:168,18:169,20:$VX,21:$VY,25:[1,267],27:160,29:159,32:181,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,46:224,47:163,48:170,49:171,50:172,51:173,52:174,53:175,54:176,55:177,56:178,57:179,58:$VZ,63:$V_,67:$V$,74:$V01,75:$V11,76:$V21,78:192,79:193,82:$V31,83:$V41,84:$V51},{20:[1,268]},{44:[1,269]},{25:[1,270],30:$VV},{22:[1,271],34:$VD,35:$VE,90:$VF,91:$VG,92:$VH,93:$VI,94:$VJ,95:$VK,96:$VL,97:$VM,98:$VN,99:$VO,100:$VP,102:$VQ},o($Vh1,[2,68]),o($Vh1,[2,70]),o($Va,[2,15]),{7:161,9:162,13:164,14:165,15:166,16:167,17:168,18:169,20:$VX,21:$VY,25:[1,272],27:160,29:159,32:181,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,46:224,47:163,48:170,49:171,50:172,51:173,52:174,53:175,54:176,55:177,56:178,57:179,58:$VZ,63:$V_,67:$V$,74:$V01,75:$V11,76:$V21,78:192,79:193,82:$V31,83:$V41,84:$V51},{43:[1,273]},{21:[1,274]},o($Va1,$V91,{8:[1,275]}),{22:[1,276],30:$VV},{22:[1,277],34:$VD,35:$VE,90:$VF,91:$VG,92:$VH,93:$VI,94:$VJ,95:$VK,96:$VL,97:$VM,98:$VN,99:$VO,100:$VP,102:$VQ},{22:[1,278],34:$VD,35:$VE,90:$VF,91:$VG,92:$VH,93:$VI,94:$VJ,95:$VK,96:$VL,97:$VM,98:$VN,99:$VO,100:$VP,102:$VQ},{22:[1,279],34:$VD,35:$VE,90:$VF,91:$VG,92:$VH,93:$VI,94:$VJ,95:$VK,96:$VL,97:$VM,98:$VN,99:$VO,100:$VP,102:$VQ},{22:[1,280],34:$VD,35:$VE,90:$VF,91:$VG,92:$VH,93:$VI,94:$VJ,95:$VK,96:$VL,97:$VM,98:$VN,99:$VO,100:$VP,102:$VQ},{7:161,9:162,13:164,14:165,15:166,16:167,17:168,18:169,20:$VX,21:$VY,25:[1,281],27:160,29:159,32:181,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,46:224,47:163,48:170,49:171,50:172,51:173,52:174,53:175,54:176,55:177,56:178,57:179,58:$VZ,63:$V_,67:$V$,74:$V01,75:$V11,76:$V21,78:192,79:193,82:$V31,83:$V41,84:$V51},{74:[1,282]},{8:[1,283]},{8:[2,92]},{8:[2,93]},{20:$Vd1},{37:$Vc},o($Va1,[2,101]),o($Va,[2,24]),o($VT,[2,28]),{17:62,20:$Vj,21:$Vk,29:61,31:284,48:63,86:$Vl,87:$Vm,88:$Vn,89:$Vo,91:$Vp,101:$Vq,103:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA},{8:[1,285]},o($VR,[2,138]),o($Va,[2,16]),{34:[1,286]},{17:62,20:$Vj,21:$Vk,29:61,31:287,48:63,86:$Vl,87:$Vm,88:$Vn,89:$Vo,91:$Vp,101:$Vq,103:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA},o($Va1,[2,17]),o($Va1,$Vg1,{8:[1,288]}),{8:[1,289]},{23:[1,290]},{23:[1,291]},{23:[1,292]},{74:[1,293]},{21:[1,294]},{17:62,20:$Vj,21:$Vk,29:61,31:295,48:63,86:$Vl,87:$Vm,88:$Vn,89:$Vo,91:$Vp,101:$Vq,103:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA},{34:$VD,35:$VE,45:[1,296],90:$VF,91:$VG,92:$VH,93:$VI,94:$VJ,95:$VK,96:$VL,97:$VM,98:$VN,99:$VO,100:$VP,102:$VQ},o($Vh1,[2,67]),{32:297,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$VC,44:$V9},{22:[1,298],34:$VD,35:$VE,90:$VF,91:$VG,92:$VH,93:$VI,94:$VJ,95:$VK,96:$VL,97:$VM,98:$VN,99:$VO,100:$VP,102:$VQ},o($Va1,[2,18]),o($Va1,[2,65]),{7:161,9:162,13:164,14:165,15:166,16:167,17:168,18:169,20:$VX,21:$VY,24:299,27:160,29:159,32:181,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,46:158,47:163,48:170,49:171,50:172,51:173,52:174,53:175,54:176,55:177,56:178,57:179,58:$VZ,63:$V_,67:$V$,74:$V01,75:$V11,76:$V21,78:192,79:193,82:$V31,83:$V41,84:$V51},{68:300,69:301,70:302,71:$Vi1,73:$Vj1},{7:161,9:162,13:164,14:165,15:166,16:167,17:168,18:169,20:$VX,21:$VY,24:305,27:160,29:159,32:181,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,46:158,47:163,48:170,49:171,50:172,51:173,52:174,53:175,54:176,55:177,56:178,57:179,58:$VZ,63:$V_,67:$V$,74:$V01,75:$V11,76:$V21,78:192,79:193,82:$V31,83:$V41,84:$V51},{21:[1,306]},{17:62,20:$Vj,21:$Vk,29:61,31:307,48:63,86:$Vl,87:$Vm,88:$Vn,89:$Vo,91:$Vp,101:$Vq,103:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA},{8:[1,308],34:$VD,35:$VE,90:$VF,91:$VG,92:$VH,93:$VI,94:$VJ,95:$VK,96:$VL,97:$VM,98:$VN,99:$VO,100:$VP,102:$VQ},{8:[1,309]},{35:[1,310]},{8:[1,311]},{7:161,9:162,13:164,14:165,15:166,16:167,17:168,18:169,20:$VX,21:$VY,25:[1,312],27:160,29:159,32:181,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,46:224,47:163,48:170,49:171,50:172,51:173,52:174,53:175,54:176,55:177,56:178,57:179,58:$VZ,63:$V_,67:$V$,74:$V01,75:$V11,76:$V21,78:192,79:193,82:$V31,83:$V41,84:$V51},{25:[1,314],69:313,70:315,71:$Vi1,73:$Vj1},{25:[1,316]},o($Vk1,[2,84]),{72:[1,317]},{17:62,20:$Vj,21:$Vk,29:61,31:318,48:63,86:$Vl,87:$Vm,88:$Vn,89:$Vo,91:$Vp,101:$Vq,103:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA},{7:161,9:162,13:164,14:165,15:166,16:167,17:168,18:169,20:$VX,21:$VY,25:[1,319],27:160,29:159,32:181,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,46:224,47:163,48:170,49:171,50:172,51:173,52:174,53:175,54:176,55:177,56:178,57:179,58:$VZ,63:$V_,67:$V$,74:$V01,75:$V11,76:$V21,78:192,79:193,82:$V31,83:$V41,84:$V51},{17:62,20:$Vj,21:$Vk,29:61,31:320,48:63,86:$Vl,87:$Vm,88:$Vn,89:$Vo,91:$Vp,101:$Vq,103:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA},{22:[1,321],34:$VD,35:$VE,90:$VF,91:$VG,92:$VH,93:$VI,94:$VJ,95:$VK,96:$VL,97:$VM,98:$VN,99:$VO,100:$VP,102:$VQ},{20:[1,323],57:322,78:192,79:193},o($Vh1,[2,66]),{8:[1,324]},o($Vh1,[2,72]),o($Va1,[2,73],{65:326,66:327,64:[1,325]}),{25:[1,328]},o($Va1,[2,81]),o($Vk1,[2,83]),o($Va1,[2,82]),{7:161,9:162,13:164,14:165,15:166,16:167,17:168,18:169,20:$VX,21:$VY,24:329,27:160,29:159,32:181,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,46:158,47:163,48:170,49:171,50:172,51:173,52:174,53:175,54:176,55:177,56:178,57:179,58:$VZ,63:$V_,67:$V$,74:$V01,75:$V11,76:$V21,78:192,79:193,82:$V31,83:$V41,84:$V51},{34:$VD,35:$VE,72:[1,330],90:$VF,91:$VG,92:$VH,93:$VI,94:$VJ,95:$VK,96:$VL,97:$VM,98:$VN,99:$VO,100:$VP,102:$VQ},o($Va1,[2,87]),{22:[1,331],34:$VD,35:$VE,90:$VF,91:$VG,92:$VH,93:$VI,94:$VJ,95:$VK,96:$VL,97:$VM,98:$VN,99:$VO,100:$VP,102:$VQ},{8:[1,332]},{22:[1,333]},{80:$Vb1,81:$Vc1},o($Vh1,[2,69]),{23:[1,334],63:$Vl1},o($Va1,[2,75],{66:337,64:[1,336]}),o($Vm1,[2,78]),o($Va1,[2,80]),{7:161,9:162,13:164,14:165,15:166,16:167,17:168,18:169,20:$VX,21:$VY,25:[2,86],27:160,29:159,32:181,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,46:224,47:163,48:170,49:171,50:172,51:173,52:174,53:175,54:176,55:177,56:178,57:179,58:$VZ,63:$V_,67:$V$,74:$V01,75:$V11,76:$V21,78:192,79:193,82:$V31,83:$V41,84:$V51},{7:161,9:162,13:164,14:165,15:166,16:167,17:168,18:169,20:$VX,21:$VY,24:338,27:160,29:159,32:181,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,46:158,47:163,48:170,49:171,50:172,51:173,52:174,53:175,54:176,55:177,56:178,57:179,58:$VZ,63:$V_,67:$V$,74:$V01,75:$V11,76:$V21,78:192,79:193,82:$V31,83:$V41,84:$V51},{8:[1,339]},o($Va1,[2,89]),{23:[1,340]},{7:161,9:162,13:164,14:165,15:166,16:167,17:168,18:169,20:$VX,21:$VY,24:341,27:160,29:159,32:181,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,46:158,47:163,48:170,49:171,50:172,51:173,52:174,53:175,54:176,55:177,56:178,57:179,58:$VZ,63:$V_,67:$V$,74:$V01,75:$V11,76:$V21,78:192,79:193,82:$V31,83:$V41,84:$V51},{21:[1,342]},{23:[1,343],63:$Vl1},o($Vm1,[2,77]),o($Vk1,[2,85],{29:159,27:160,7:161,9:162,47:163,13:164,14:165,15:166,16:167,17:168,18:169,48:170,49:171,50:172,51:173,52:174,53:175,54:176,55:177,56:178,57:179,32:181,78:192,79:193,46:224,20:$VX,21:$VY,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,58:$VZ,63:$V_,67:$V$,74:$V01,75:$V11,76:$V21,82:$V31,83:$V41,84:$V51}),o($Va1,[2,88]),{7:161,9:162,13:164,14:165,15:166,16:167,17:168,18:169,20:$VX,21:$VY,24:344,25:[1,345],27:160,29:159,32:181,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,46:158,47:163,48:170,49:171,50:172,51:173,52:174,53:175,54:176,55:177,56:178,57:179,58:$VZ,63:$V_,67:$V$,74:$V01,75:$V11,76:$V21,78:192,79:193,82:$V31,83:$V41,84:$V51},{7:161,9:162,13:164,14:165,15:166,16:167,17:168,18:169,20:$VX,21:$VY,25:[1,346],27:160,29:159,32:181,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,46:224,47:163,48:170,49:171,50:172,51:173,52:174,53:175,54:176,55:177,56:178,57:179,58:$VZ,63:$V_,67:$V$,74:$V01,75:$V11,76:$V21,78:192,79:193,82:$V31,83:$V41,84:$V51},{17:62,20:$Vj,21:$Vk,29:61,31:347,48:63,86:$Vl,87:$Vm,88:$Vn,89:$Vo,91:$Vp,101:$Vq,103:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv,108:$Vw,109:$Vx,110:$Vy,111:$Vz,112:$VA},{7:161,9:162,13:164,14:165,15:166,16:167,17:168,18:169,20:$VX,21:$VY,24:348,27:160,29:159,32:181,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,46:158,47:163,48:170,49:171,50:172,51:173,52:174,53:175,54:176,55:177,56:178,57:179,58:$VZ,63:$V_,67:$V$,74:$V01,75:$V11,76:$V21,78:192,79:193,82:$V31,83:$V41,84:$V51},{7:161,9:162,13:164,14:165,15:166,16:167,17:168,18:169,20:$VX,21:$VY,25:[1,349],27:160,29:159,32:181,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,46:224,47:163,48:170,49:171,50:172,51:173,52:174,53:175,54:176,55:177,56:178,57:179,58:$VZ,63:$V_,67:$V$,74:$V01,75:$V11,76:$V21,78:192,79:193,82:$V31,83:$V41,84:$V51},o($Va1,[2,91]),o($Va1,[2,74]),{22:[1,350],34:$VD,35:$VE,90:$VF,91:$VG,92:$VH,93:$VI,94:$VJ,95:$VK,96:$VL,97:$VM,98:$VN,99:$VO,100:$VP,102:$VQ},{7:161,9:162,13:164,14:165,15:166,16:167,17:168,18:169,20:$VX,21:$VY,25:[1,351],27:160,29:159,32:181,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,46:224,47:163,48:170,49:171,50:172,51:173,52:174,53:175,54:176,55:177,56:178,57:179,58:$VZ,63:$V_,67:$V$,74:$V01,75:$V11,76:$V21,78:192,79:193,82:$V31,83:$V41,84:$V51},o($Va1,[2,90]),{23:[1,352]},o($Va1,[2,76]),{7:161,9:162,13:164,14:165,15:166,16:167,17:168,18:169,20:$VX,21:$VY,24:353,27:160,29:159,32:181,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,46:158,47:163,48:170,49:171,50:172,51:173,52:174,53:175,54:176,55:177,56:178,57:179,58:$VZ,63:$V_,67:$V$,74:$V01,75:$V11,76:$V21,78:192,79:193,82:$V31,83:$V41,84:$V51},{7:161,9:162,13:164,14:165,15:166,16:167,17:168,18:169,20:$VX,21:$VY,25:[1,354],27:160,29:159,32:181,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,46:224,47:163,48:170,49:171,50:172,51:173,52:174,53:175,54:176,55:177,56:178,57:179,58:$VZ,63:$V_,67:$V$,74:$V01,75:$V11,76:$V21,78:192,79:193,82:$V31,83:$V41,84:$V51},o($Vm1,[2,79])],
defaultActions: {26:[2,1],262:[2,92],263:[2,93]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

        const TIPO_OPERACION= require('../controladores/Enums/TipoOperacion');
        const TIPO_VALOR = require('../controladores/Enums/TipoValor');
        const TIPO_DATO= require('../controladores/Enums/TipoDato');
        const INSTRUCCION = require('../controladores/Instruccion/Instruccion');     

        let respuesta = {
                LIns: [],
                err: ""
        };
              
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1://comentario lineal
break;
case 2:// comentario multiple líneas   
break;
case 3:return 38
break;
case 4:return 39
break;
case 5:return 41
break;
case 6:return 40
break;
case 7:return 42
break;
case 8:return 43
break;
case 9:return 63
break;
case 10:return 64
break;
case 11:return 67
break;
case 12:return 71
break;
case 13:return 75
break;
case 14:return 74
break;
case 15:return 76
break;
case 16:return 82
break;
case 17:return 83
break;
case 18:return 84
break;
case 19:return 73
break;
case 20:return 19
break;
case 21:return 59
break;
case 22:return 61
break;
case 23:return 'Rsetvalue'
break;
case 24:return 58
break;
case 25:return 103
break;
case 26:return 104
break;
case 27:return 36
break;
case 28:return 112
break;
case 29:return 62
break;
case 30:return 106
break;
case 31:return 105
break;
case 32:return 107
break;
case 33:return 108
break;
case 34:return 109
break;
case 35:return 110
break;
case 36:return 111
break;
case 37:return 86
break;
case 38:return 60
break;
case 39:return 87
break;
case 40:return 102       
break;
case 41:return 98
break;
case 42:return 96
break;
case 43:return 34
break;
case 44:return 97
break;
case 45:return 37
break;
case 46:return 35
break;
case 47:return 30
break;
case 48:return 8
break;
case 49:return 72
break;
case 50:return 100
break;
case 51:return 99
break;
case 52:return 23
break;
case 53:return 25
break;
case 54:return 92
break;
case 55:return 93
break;
case 56:return 81
break;
case 57:return 80   
break;
case 58:return 91
break;
case 59:return 90
break;
case 60:return 94
break;
case 61:return 101
break;
case 62:return 95
break;
case 63:return 21
break;
case 64:return 22
break;
case 65:return 44
break;
case 66:return 45
break;
case 67:return 20
break;
case 68:return 88
break;
case 69:return 89
break;
case 70:return 5
break;
case 71: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:list\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:do\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:default\b)/i,/^(?:void\b)/i,/^(?:new\b)/i,/^(?:add\b)/i,/^(?:setvalue\b)/i,/^(?:print\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:main\b)/i,/^(?:getvalue\b)/i,/^(?:tochararray\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:length\b)/i,/^(?:truncate\b)/i,/^(?:round\b)/i,/^(?:typeof\b)/i,/^(?:tostring\b)/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:\.)/i,/^(?:[0-9]+\b)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:=)/i,/^(?:>)/i,/^(?:,)/i,/^(?:;)/i,/^(?::)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:--)/i,/^(?:\+\+)/i,/^(?:-)/i,/^(?:\+)/i,/^(?:\^)/i,/^(?:!)/i,/^(?:%)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:([a-zA-Z])([a-zA-Z0-9_])*)/i,/^(?:["\""]([^"\""])*["\""])/i,/^(?:["\'"]([^"\'"])*["\'"])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}