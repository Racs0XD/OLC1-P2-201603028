/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,11],$V1=[1,10],$V2=[1,12],$V3=[1,13],$V4=[1,14],$V5=[1,15],$V6=[1,16],$V7=[1,17],$V8=[5,13,14,30,32,33,34,35,36],$V9=[1,23],$Va=[14,28,29,32,33,34,35,36],$Vb=[2,23],$Vc=[1,26],$Vd=[1,37],$Ve=[1,31],$Vf=[1,29],$Vg=[1,30],$Vh=[1,32],$Vi=[1,33],$Vj=[1,34],$Vk=[1,35],$Vl=[1,36],$Vm=[1,38],$Vn=[1,52],$Vo=[1,53],$Vp=[1,46],$Vq=[1,47],$Vr=[1,48],$Vs=[1,49],$Vt=[1,50],$Vu=[1,51],$Vv=[1,54],$Vw=[1,55],$Vx=[1,56],$Vy=[1,57],$Vz=[1,58],$VA=[1,59],$VB=[8,16,23,28,29,57,70,71,72,73,74,75,76,77,78,79,80,82],$VC=[1,68],$VD=[16,23],$VE=[8,16,23,57,79,80],$VF=[1,104],$VG=[1,114],$VH=[1,106],$VI=[1,107],$VJ=[1,108],$VK=[1,109],$VL=[1,110],$VM=[1,111],$VN=[1,112],$VO=[1,113],$VP=[8,16,23,28,29,57,70,71,76,77,78,79,80,82],$VQ=[8,16,23,28,29,57,70,71,72,73,75,76,77,78,79,80,82],$VR=[8,16,23,28,29,57,76,77,78,79,80,82],$VS=[14,19,26,32,33,34,35,36,47,48,52,56,58,59,60,61,68,69],$VT=[1,135],$VU=[1,184],$VV=[1,183],$VW=[19,56,58],$VX=[1,216],$VY=[14,19,26,32,33,34,35,36,47,48,49,52,56,58,59,60,61,68,69];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"OPCIONESCUERPO":4,"EOF":5,"CUERPO":6,"DEC_VAR":7,"ptcoma":8,"ASIG_VAR":9,"METODOS":10,"FUNCIONES":11,"MAIN":12,"Rvoid":13,"identificador":14,"parA":15,"parC":16,"llaveA":17,"INSTRUCCIONES":18,"llaveC":19,"LPARAMETROS":20,"LLAMADAMETODO":21,"LISTAVALORES":22,"coma":23,"EXPRESION":24,"TIPO":25,"Rreturn":26,"PARAMETROS":27,"menor":28,"mayor":29,"Rmain":30,"igual":31,"Rint":32,"Rdouble":33,"Rchar":34,"Rboolean":35,"Rstring":36,"INSTRUCCION":37,"PRINT":38,"IF":39,"SWITCH":40,"WHILE":41,"DOWHILE":42,"FOR":43,"BREAK":44,"CONTINUE":45,"RETURN":46,"Rprint":47,"Rif":48,"Relse":49,"ELSEIFS":50,"CONELSEIF":51,"Rswitch":52,"CSWITCH":53,"DEF":54,"CONSWITCH":55,"Rcase":56,"dospuntos":57,"Rdefault":58,"Rwhile":59,"Rdo":60,"Rfor":61,"CUERPOFOR":62,"INSTRUCCIONFOR":63,"INCREMENTO":64,"DECREMENTO":65,"masmas":66,"menosmenos":67,"Rbreak":68,"Rcontinue":69,"suma":70,"menos":71,"multi":72,"div":73,"exponente":74,"modulo":75,"menorIgual":76,"mayorIgual":77,"diferente":78,"and":79,"or":80,"not":81,"igualigual":82,"decimal":83,"entero":84,"Rtrue":85,"Rfalse":86,"string":87,"char":88,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"ptcoma",13:"Rvoid",14:"identificador",15:"parA",16:"parC",17:"llaveA",19:"llaveC",23:"coma",26:"Rreturn",28:"menor",29:"mayor",30:"Rmain",31:"igual",32:"Rint",33:"Rdouble",34:"Rchar",35:"Rboolean",36:"Rstring",47:"Rprint",48:"Rif",49:"Relse",52:"Rswitch",56:"Rcase",57:"dospuntos",58:"Rdefault",59:"Rwhile",60:"Rdo",61:"Rfor",66:"masmas",67:"menosmenos",68:"Rbreak",69:"Rcontinue",70:"suma",71:"menos",72:"multi",73:"div",74:"exponente",75:"modulo",76:"menorIgual",77:"mayorIgual",78:"diferente",79:"and",80:"or",81:"not",82:"igualigual",83:"decimal",84:"entero",85:"Rtrue",86:"Rfalse",87:"string",88:"char"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,1],[6,1],[6,1],[10,7],[10,8],[21,4],[21,5],[22,3],[22,1],[11,10],[11,11],[20,3],[20,1],[27,2],[27,5],[27,3],[12,5],[7,2],[7,4],[9,3],[25,1],[25,1],[25,1],[25,1],[25,1],[18,2],[18,1],[37,1],[37,2],[37,2],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[38,5],[39,7],[39,11],[39,8],[39,12],[50,2],[50,1],[51,8],[40,8],[40,7],[40,7],[53,2],[53,1],[55,4],[54,3],[41,7],[42,9],[42,8],[43,11],[43,10],[62,1],[62,1],[63,1],[63,1],[64,2],[65,2],[44,2],[45,2],[46,2],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,2],[24,2],[24,3],[24,3],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
respuesta.err = ""; respuesta.LIns = $$[$0-1]; return respuesta;
break;
case 2: case 56:
$$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 3: case 18: case 51: case 57:
this.$=[$$[$0]];
break;
case 4: case 5: case 35:
this.$=$$[$0-1];
break;
case 6: case 7: case 8: case 36: case 65: case 66:
this.$=$$[$0];
break;
case 9:
this.$ = INSTRUCCION.nuevoMetodo($$[$0-5], null, $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 10:
this.$ = INSTRUCCION.nuevoMetodo($$[$0-6], $$[$0-4], $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 11:
this.$ = INSTRUCCION.nuevaLlamada($$[$0-3], null, this._$.first_line,this._$.first_column+1)
break;
case 12:
this.$ = INSTRUCCION.nuevaLlamada($$[$0-4], $$[$0-2], this._$.first_line,this._$.first_column+1)
break;
case 13:
$$[$0-2].push($$[$0]); this.$=$$[$0-2]
break;
case 14:
this.$=[$$[$0]]
break;
case 15:
this.$ = INSTRUCCION.nuevaFuncion($$[$0-9], $$[$0-8], null, $$[$0-4], $$[$0-3], this._$.first_line,this._$.first_column+1)
break;
case 16:
this.$ = INSTRUCCION.nuevaFuncion($$[$0-10], $$[$0-9], $$[$0-7], $$[$0-4], $$[$0-3], this._$.first_line,this._$.first_column+1)
break;
case 17:
$$[$0-2].push($$[$0]); this.$=$$[$0-2];
break;
case 19: case 21:
this.$ = INSTRUCCION.nuevaDeclaracion($$[$0], null, $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 20:
this.$ = INSTRUCCION.nuevaDeclaracion($$[$0], null, $$[$0-4], this._$.first_line,this._$.first_column+1)
break;
case 22:
this.$ = INSTRUCCION.nuevoMain($$[$0-3], null, this._$.first_line,this._$.first_column+1)
break;
case 23:
this.$= INSTRUCCION.nuevaDeclaracion($$[$0],null, $$[$0-1],this._$.first_line, this._$.first_column+1)
break;
case 24:
this.$= INSTRUCCION.nuevaDeclaracion($$[$0-2], $$[$0], $$[$0-3],this._$.first_line, this._$.first_column+1)
break;
case 25:
this.$ = INSTRUCCION.nuevaAsignacion($$[$0-2], $$[$0],this._$.first_line, this._$.first_column+1)
break;
case 26:
this.$= TIPO_DATO.ENTERO
break;
case 27:
this.$= TIPO_DATO.DECIMAL
break;
case 28:
this.$= TIPO_DATO.CHAR
break;
case 29:
this.$= TIPO_DATO.BOOL
break;
case 30:
this.$= TIPO_DATO.CADENA
break;
case 31:
this.$ = $$[$0-1]; $$[$0-1].push($$[$0]);
break;
case 32:
this.$ = [$$[$0]];
break;
case 33: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 67: case 68:
this.$=$$[$0]
break;
case 34: case 89:
this.$=$$[$0-1]
break;
case 45:
this.$ = INSTRUCCION.nuevoPrint($$[$0-2], this._$.first_line,this._$.first_column+1)
break;
case 46:
this.$ = new INSTRUCCION.nuevoIf($$[$0-4], $$[$0-1] , this._$.first_line,this._$.first_column+1)
break;
case 47:
this.$ = new INSTRUCCION.nuevoIfElse($$[$0-8], $$[$0-5], $$[$0-1] , this._$.first_line,this._$.first_column+1)
break;
case 48:
this.$ = new INSTRUCCION.nuevoIfElseIf($$[$0-5], $$[$0-2],$$[$0],null,this._$.first_line, this._$.first_column+1)
break;
case 49:
this.$ = new INSTRUCCION.nuevoIfElseIf($$[$0-9], $$[$0-6],$$[$0-4],$$[$0-1],this._$.first_line, this._$.first_column+1)
break;
case 50:
$$[$0-1].push($$[$0]); this.$=$$[$0-1]
break;
case 52:
this.$ = new INSTRUCCION.nuevoElseIf($$[$0-4], $$[$0-1],this._$.first_line, this._$.first_column+1)
break;
case 53:
this.$= new INSTRUCCION.nuevoSwitch($$[$0-5], $$[$0-2], $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 54:
this.$= new INSTRUCCION.nuevoSwitch($$[$0-4], $$[$0-1], null, this._$.first_line,this._$.first_column+1)
break;
case 55:
this.$= new INSTRUCCION.nuevoSwitch($$[$0-4], null, $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 58:
this.$ = new INSTRUCCION.nuevoCase($$[$0-2], $$[$0] , this._$.first_line,this._$.first_column+1) 
break;
case 59:
this.$ = $$[$0]
break;
case 60:
this.$ = new INSTRUCCION.nuevoWhile($$[$0-4], $$[$0-1] , this._$.first_line,this._$.first_column+1)
break;
case 61:
this.$ = new INSTRUCCION.nuevoDoWhile($$[$0-2], $$[$0-6] , this._$.first_line,this._$.first_column+1)
break;
case 62:
this.$ = new INSTRUCCION.nuevoDoWhile($$[$0-2], [] , this._$.first_line,(this._$.first_column+1));
break;
case 63:
this.$ = new INSTRUCCION.nuevoFor($$[$0-8], $$[$0-6], $$[$0-4], $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 64:
this.$ = new INSTRUCCION.nuevoFor($$[$0-7], $$[$0-5], $$[$0-3], $$[$0], this._$.first_line,this._$.first_column+1)
break;
case 69:
this.$= INSTRUCCION.nuevoIncremento($$[$0-1],this._$.first_line,this._$.first_column+1)
break;
case 70:
this.$= INSTRUCCION.nuevoDecremento($$[$0-1],this._$.first_line,this._$.first_column+1)
break;
case 71:
this.$ = new INSTRUCCION.nuevoBreak(this._$.first_line,this._$.first_column+1)
break;
case 72:
this.$ = new INSTRUCCION.nuevoContinue(this._$.first_line,this._$.first_column+1)
break;
case 73:
this.$ = new INSTRUCCION.nuevoReturn(this._$.first_line,this._$.first_column+1)
break;
case 74:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.SUMA,this._$.first_line, this._$.first_column+1);
break;
case 75:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.RESTA,this._$.first_line, this._$.first_column+1);
break;
case 76:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MULTIPLICACION,this._$.first_line, this._$.first_column+1);
break;
case 77:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.DIVISION,this._$.first_line, this._$.first_column+1);
break;
case 78:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.POTENCIA,this._$.first_line, this._$.first_column+1);
break;
case 79:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MODULO,this._$.first_line, this._$.first_column+1);
break;
case 80:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MENOR,this._$.first_line, this._$.first_column+1);
break;
case 81:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MAYOR,this._$.first_line, this._$.first_column+1);
break;
case 82:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MENORIGUAL,this._$.first_line, this._$.first_column+1);
break;
case 83:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MAYORIGUAL,this._$.first_line, this._$.first_column+1);
break;
case 84:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.DIFERENTE,this._$.first_line, this._$.first_column+1);
break;
case 85:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.AND,this._$.first_line, this._$.first_column+1);
break;
case 86:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.OR,this._$.first_line, this._$.first_column+1);
break;
case 87:
this.$= INSTRUCCION.nuevaOperacionUnaria($$[$0], TIPO_OPERACION.UNARIA,this._$.first_line, this._$.first_column+1);
break;
case 88:
this.$= INSTRUCCION.nuevaOperacionBinaria(null,$$[$0], TIPO_OPERACION.NOT,this._$.first_line, this._$.first_column+1);
break;
case 90:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.IGUALIGUAL,this._$.first_line, this._$.first_column+1);
break;
case 91:
this.$= INSTRUCCION.nuevoValor(Number($$[$0]),TIPO_VALOR.DECIMAL,this._$.first_line, this._$.first_column+1);
break;
case 92:
this.$= INSTRUCCION.nuevoValor(Number($$[$0]),TIPO_VALOR.ENTERO,this._$.first_line, this._$.first_column+1);
break;
case 93: case 94:
this.$= INSTRUCCION.nuevoValor($$[$0],TIPO_VALOR.BOOL,this._$.first_line, this._$.first_column+1);
break;
case 95:
this.$= INSTRUCCION.nuevoValor($$[$0],TIPO_VALOR.CADENA,this._$.first_line, this._$.first_column+1);
break;
case 96:
this.$= INSTRUCCION.nuevoValor($$[$0],TIPO_VALOR.IDENTIFICADOR,this._$.first_line, this._$.first_column+1);
break;
case 97:
this.$= INSTRUCCION.nuevoValor($$[$0],TIPO_VALOR.CHAR,this._$.first_line, this._$.first_column+1);
break;
}
},
table: [{3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:$V0,14:$V1,25:9,30:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7},{1:[3]},{5:[1,18],6:19,7:4,9:5,10:6,11:7,12:8,13:$V0,14:$V1,25:9,30:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7},o($V8,[2,3]),{8:[1,20]},{8:[1,21]},o($V8,[2,6]),o($V8,[2,7]),o($V8,[2,8]),{14:[1,22]},{31:$V9},{14:[1,24]},{14:[1,25]},o($Va,[2,26]),o($Va,[2,27]),o($Va,[2,28]),o($Va,[2,29]),o($Va,[2,30]),{1:[2,1]},o($V8,[2,2]),o($V8,[2,4]),o($V8,[2,5]),{8:$Vb,15:[1,27],31:$Vc},{14:$Vd,15:$Ve,24:28,71:$Vf,81:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm},{15:[1,39]},{15:[1,40]},{14:$Vd,15:$Ve,24:41,71:$Vf,81:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm},{16:[1,42],20:43,25:45,27:44,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7},{8:[2,25],28:$Vn,29:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz,82:$VA},{14:$Vd,15:$Ve,24:60,71:$Vf,81:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm},{14:$Vd,15:$Ve,24:61,71:$Vf,81:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm},{14:$Vd,15:$Ve,24:62,71:$Vf,81:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm},o($VB,[2,91]),o($VB,[2,92]),o($VB,[2,93]),o($VB,[2,94]),o($VB,[2,95]),o($VB,[2,96]),o($VB,[2,97]),{16:[1,63],20:64,25:45,27:44,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7},{16:[1,65]},{8:[2,24],28:$Vn,29:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz,82:$VA},{17:[1,66]},{16:[1,67],23:$VC},o($VD,[2,18]),{14:[1,69],25:71,28:[1,70],32:$V3,33:$V4,34:$V5,35:$V6,36:$V7},{14:$Vd,15:$Ve,24:72,71:$Vf,81:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm},{14:$Vd,15:$Ve,24:73,71:$Vf,81:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm},{14:$Vd,15:$Ve,24:74,71:$Vf,81:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm},{14:$Vd,15:$Ve,24:75,71:$Vf,81:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm},{14:$Vd,15:$Ve,24:76,71:$Vf,81:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm},{14:$Vd,15:$Ve,24:77,71:$Vf,81:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm},{14:$Vd,15:$Ve,24:78,71:$Vf,81:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm},{14:$Vd,15:$Ve,24:79,71:$Vf,81:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm},{14:$Vd,15:$Ve,24:80,71:$Vf,81:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm},{14:$Vd,15:$Ve,24:81,71:$Vf,81:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm},{14:$Vd,15:$Ve,24:82,71:$Vf,81:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm},{14:$Vd,15:$Ve,24:83,71:$Vf,81:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm},{14:$Vd,15:$Ve,24:84,71:$Vf,81:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm},{14:$Vd,15:$Ve,24:85,71:$Vf,81:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm},o($VB,[2,87]),o($VE,[2,88],{28:$Vn,29:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,82:$VA}),{16:[1,86],28:$Vn,29:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz,82:$VA},{17:[1,87]},{16:[1,88],23:$VC},{8:[1,89]},{7:93,9:94,14:$VF,18:90,21:92,25:105,26:$VG,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:91,38:95,39:96,40:97,41:98,42:99,43:100,44:101,45:102,46:103,47:$VH,48:$VI,52:$VJ,59:$VK,60:$VL,61:$VM,68:$VN,69:$VO},{17:[1,115]},{25:45,27:116,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7},o($VD,[2,19]),{25:117,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7},{14:[1,118]},o($VP,[2,74],{72:$Vr,73:$Vs,74:$Vt,75:$Vu}),o($VP,[2,75],{72:$Vr,73:$Vs,74:$Vt,75:$Vu}),o($VQ,[2,76],{74:$Vt}),o($VQ,[2,77],{74:$Vt}),o($VQ,[2,78]),o($VQ,[2,79],{74:$Vt}),o($VR,[2,80],{70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu}),o($VR,[2,81],{70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu}),o($VR,[2,82],{70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu}),o($VR,[2,83],{70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu}),o($VR,[2,84],{70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu}),o($VE,[2,85],{28:$Vn,29:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,82:$VA}),o([8,16,23,57,80],[2,86],{28:$Vn,29:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,82:$VA}),o($VR,[2,90],{70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu}),o($VB,[2,89]),{7:93,9:94,14:$VF,18:119,21:92,25:105,26:$VG,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:91,38:95,39:96,40:97,41:98,42:99,43:100,44:101,45:102,46:103,47:$VH,48:$VI,52:$VJ,59:$VK,60:$VL,61:$VM,68:$VN,69:$VO},{17:[1,120]},o($V8,[2,22]),{7:93,9:94,14:$VF,21:92,25:105,26:[1,121],32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:122,38:95,39:96,40:97,41:98,42:99,43:100,44:101,45:102,46:103,47:$VH,48:$VI,52:$VJ,59:$VK,60:$VL,61:$VM,68:$VN,69:$VO},o($VS,[2,32]),o($VS,[2,33]),{8:[1,123]},{8:[1,124]},o($VS,[2,36]),o($VS,[2,37]),o($VS,[2,38]),o($VS,[2,39]),o($VS,[2,40]),o($VS,[2,41]),o($VS,[2,42]),o($VS,[2,43]),o($VS,[2,44]),{15:[1,125],31:$V9},{14:[1,126]},{15:[1,127]},{15:[1,128]},{15:[1,129]},{15:[1,130]},{17:[1,131]},{15:[1,132]},{8:[1,133]},{8:[1,134]},{8:$VT},{7:93,9:94,14:$VF,18:136,21:92,25:105,26:$VG,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:91,38:95,39:96,40:97,41:98,42:99,43:100,44:101,45:102,46:103,47:$VH,48:$VI,52:$VJ,59:$VK,60:$VL,61:$VM,68:$VN,69:$VO},o($VD,[2,17]),{29:[1,137]},o($VD,[2,21]),{7:93,9:94,14:$VF,19:[1,138],21:92,25:105,26:$VG,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:122,38:95,39:96,40:97,41:98,42:99,43:100,44:101,45:102,46:103,47:$VH,48:$VI,52:$VJ,59:$VK,60:$VL,61:$VM,68:$VN,69:$VO},{7:93,9:94,14:$VF,18:139,21:92,25:105,26:$VG,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:91,38:95,39:96,40:97,41:98,42:99,43:100,44:101,45:102,46:103,47:$VH,48:$VI,52:$VJ,59:$VK,60:$VL,61:$VM,68:$VN,69:$VO},{8:$VT,14:$Vd,15:$Ve,24:140,71:$Vf,81:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm},o($VS,[2,31]),o($VS,[2,34]),o($VS,[2,35]),{14:$Vd,15:$Ve,16:[1,141],22:142,24:143,71:$Vf,81:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm},{8:$Vb,31:$Vc},{14:$Vd,15:$Ve,24:144,71:$Vf,81:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm},{14:$Vd,15:$Ve,24:145,71:$Vf,81:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm},{14:$Vd,15:$Ve,24:146,71:$Vf,81:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm},{14:$Vd,15:$Ve,24:147,71:$Vf,81:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm},{7:93,9:94,14:$VF,18:148,19:[1,149],21:92,25:105,26:$VG,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:91,38:95,39:96,40:97,41:98,42:99,43:100,44:101,45:102,46:103,47:$VH,48:$VI,52:$VJ,59:$VK,60:$VL,61:$VM,68:$VN,69:$VO},{7:151,9:152,14:$V1,25:105,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,62:150},o($VS,[2,71]),o($VS,[2,72]),o($VS,[2,73]),{7:93,9:94,14:$VF,21:92,25:105,26:[1,153],32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:122,38:95,39:96,40:97,41:98,42:99,43:100,44:101,45:102,46:103,47:$VH,48:$VI,52:$VJ,59:$VK,60:$VL,61:$VM,68:$VN,69:$VO},{14:[1,154]},o($V8,[2,9]),{7:93,9:94,14:$VF,19:[1,155],21:92,25:105,26:$VG,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:122,38:95,39:96,40:97,41:98,42:99,43:100,44:101,45:102,46:103,47:$VH,48:$VI,52:$VJ,59:$VK,60:$VL,61:$VM,68:$VN,69:$VO},{8:[1,156],28:$Vn,29:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz,82:$VA},{8:[1,157]},{16:[1,158],23:[1,159]},o($VD,[2,14],{28:$Vn,29:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz,82:$VA}),{16:[1,160],28:$Vn,29:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz,82:$VA},{16:[1,161],28:$Vn,29:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz,82:$VA},{16:[1,162],28:$Vn,29:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz,82:$VA},{16:[1,163],28:$Vn,29:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz,82:$VA},{7:93,9:94,14:$VF,19:[1,164],21:92,25:105,26:$VG,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:122,38:95,39:96,40:97,41:98,42:99,43:100,44:101,45:102,46:103,47:$VH,48:$VI,52:$VJ,59:$VK,60:$VL,61:$VM,68:$VN,69:$VO},{59:[1,165]},{8:[1,166]},{8:[2,65]},{8:[2,66]},{8:$VT,14:$Vd,15:$Ve,24:167,71:$Vf,81:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm},o($VD,[2,20]),o($V8,[2,10]),{19:[1,168]},o($VS,[2,11]),{8:[1,169]},{14:$Vd,15:$Ve,24:170,71:$Vf,81:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm},{8:[1,171]},{17:[1,172]},{17:[1,173]},{17:[1,174]},{59:[1,175]},{15:[1,176]},{14:$Vd,15:$Ve,24:177,71:$Vf,81:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm},{8:[1,178],28:$Vn,29:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz,82:$VA},o($V8,[2,15]),o($VS,[2,12]),o($VD,[2,13],{28:$Vn,29:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz,82:$VA}),o($VS,[2,45]),{7:93,9:94,14:$VF,18:179,21:92,25:105,26:$VG,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:91,38:95,39:96,40:97,41:98,42:99,43:100,44:101,45:102,46:103,47:$VH,48:$VI,52:$VJ,59:$VK,60:$VL,61:$VM,68:$VN,69:$VO},{53:180,54:181,55:182,56:$VU,58:$VV},{7:93,9:94,14:$VF,18:185,21:92,25:105,26:$VG,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:91,38:95,39:96,40:97,41:98,42:99,43:100,44:101,45:102,46:103,47:$VH,48:$VI,52:$VJ,59:$VK,60:$VL,61:$VM,68:$VN,69:$VO},{15:[1,186]},{14:$Vd,15:$Ve,24:187,71:$Vf,81:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm},{8:[1,188],28:$Vn,29:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz,82:$VA},{19:[1,189]},{7:93,9:94,14:$VF,19:[1,190],21:92,25:105,26:$VG,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:122,38:95,39:96,40:97,41:98,42:99,43:100,44:101,45:102,46:103,47:$VH,48:$VI,52:$VJ,59:$VK,60:$VL,61:$VM,68:$VN,69:$VO},{19:[1,192],54:191,55:193,56:$VU,58:$VV},{19:[1,194]},o($VW,[2,57]),{57:[1,195]},{14:$Vd,15:$Ve,24:196,71:$Vf,81:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm},{7:93,9:94,14:$VF,19:[1,197],21:92,25:105,26:$VG,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:122,38:95,39:96,40:97,41:98,42:99,43:100,44:101,45:102,46:103,47:$VH,48:$VI,52:$VJ,59:$VK,60:$VL,61:$VM,68:$VN,69:$VO},{14:$Vd,15:$Ve,24:198,71:$Vf,81:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm},{16:[1,199],28:$Vn,29:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz,82:$VA},{14:[1,203],63:200,64:201,65:202},o($V8,[2,16]),o($VS,[2,46],{50:205,51:206,49:[1,204]}),{19:[1,207]},o($VS,[2,54]),o($VW,[2,56]),o($VS,[2,55]),{7:93,9:94,14:$VF,18:208,21:92,25:105,26:$VG,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:91,38:95,39:96,40:97,41:98,42:99,43:100,44:101,45:102,46:103,47:$VH,48:$VI,52:$VJ,59:$VK,60:$VL,61:$VM,68:$VN,69:$VO},{28:$Vn,29:$Vo,57:[1,209],70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz,82:$VA},o($VS,[2,60]),{16:[1,210],28:$Vn,29:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz,82:$VA},{8:[1,211]},{16:[1,212]},{16:[2,67]},{16:[2,68]},{66:[1,213],67:[1,214]},{17:[1,215],48:$VX},o($VS,[2,48],{51:218,49:[1,217]}),o($VY,[2,51]),o($VS,[2,53]),{7:93,9:94,14:$VF,19:[2,59],21:92,25:105,26:$VG,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:122,38:95,39:96,40:97,41:98,42:99,43:100,44:101,45:102,46:103,47:$VH,48:$VI,52:$VJ,59:$VK,60:$VL,61:$VM,68:$VN,69:$VO},{7:93,9:94,14:$VF,18:219,21:92,25:105,26:$VG,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:91,38:95,39:96,40:97,41:98,42:99,43:100,44:101,45:102,46:103,47:$VH,48:$VI,52:$VJ,59:$VK,60:$VL,61:$VM,68:$VN,69:$VO},{8:[1,220]},o($VS,[2,62]),{17:[1,221]},{16:[2,69]},{16:[2,70]},{7:93,9:94,14:$VF,18:222,21:92,25:105,26:$VG,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:91,38:95,39:96,40:97,41:98,42:99,43:100,44:101,45:102,46:103,47:$VH,48:$VI,52:$VJ,59:$VK,60:$VL,61:$VM,68:$VN,69:$VO},{15:[1,223]},{17:[1,224],48:$VX},o($VY,[2,50]),o($VW,[2,58],{21:92,7:93,9:94,38:95,39:96,40:97,41:98,42:99,43:100,44:101,45:102,46:103,25:105,37:122,14:$VF,26:$VG,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,47:$VH,48:$VI,52:$VJ,59:$VK,60:$VL,61:$VM,68:$VN,69:$VO}),o($VS,[2,61]),{7:93,9:94,14:$VF,18:225,19:[1,226],21:92,25:105,26:$VG,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:91,38:95,39:96,40:97,41:98,42:99,43:100,44:101,45:102,46:103,47:$VH,48:$VI,52:$VJ,59:$VK,60:$VL,61:$VM,68:$VN,69:$VO},{7:93,9:94,14:$VF,19:[1,227],21:92,25:105,26:$VG,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:122,38:95,39:96,40:97,41:98,42:99,43:100,44:101,45:102,46:103,47:$VH,48:$VI,52:$VJ,59:$VK,60:$VL,61:$VM,68:$VN,69:$VO},{14:$Vd,15:$Ve,24:228,71:$Vf,81:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm},{7:93,9:94,14:$VF,18:229,21:92,25:105,26:$VG,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:91,38:95,39:96,40:97,41:98,42:99,43:100,44:101,45:102,46:103,47:$VH,48:$VI,52:$VJ,59:$VK,60:$VL,61:$VM,68:$VN,69:$VO},{7:93,9:94,14:$VF,19:[1,230],21:92,25:105,26:$VG,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:122,38:95,39:96,40:97,41:98,42:99,43:100,44:101,45:102,46:103,47:$VH,48:$VI,52:$VJ,59:$VK,60:$VL,61:$VM,68:$VN,69:$VO},o($VS,[2,64]),o($VS,[2,47]),{16:[1,231],28:$Vn,29:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz,82:$VA},{7:93,9:94,14:$VF,19:[1,232],21:92,25:105,26:$VG,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:122,38:95,39:96,40:97,41:98,42:99,43:100,44:101,45:102,46:103,47:$VH,48:$VI,52:$VJ,59:$VK,60:$VL,61:$VM,68:$VN,69:$VO},o($VS,[2,63]),{17:[1,233]},o($VS,[2,49]),{7:93,9:94,14:$VF,18:234,21:92,25:105,26:$VG,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:91,38:95,39:96,40:97,41:98,42:99,43:100,44:101,45:102,46:103,47:$VH,48:$VI,52:$VJ,59:$VK,60:$VL,61:$VM,68:$VN,69:$VO},{7:93,9:94,14:$VF,19:[1,235],21:92,25:105,26:$VG,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:122,38:95,39:96,40:97,41:98,42:99,43:100,44:101,45:102,46:103,47:$VH,48:$VI,52:$VJ,59:$VK,60:$VL,61:$VM,68:$VN,69:$VO},o($VY,[2,52])],
defaultActions: {18:[2,1],151:[2,65],152:[2,66],201:[2,67],202:[2,68],213:[2,69],214:[2,70]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

        const TIPO_OPERACION= require('../controladores/Enums/TipoOperacion');
        const TIPO_VALOR = require('../controladores/Enums/TipoValor');
        const TIPO_DATO= require('../controladores/Enums/TipoDato');
        const INSTRUCCION = require('../controladores/Instruccion/Instruccion');     

        let respuesta = {
                LIns: [],
                err: ""
        };
              
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1://comentario lineal
break;
case 2:// comentario multiple líneas   
break;
case 3:return 32
break;
case 4:return 33
break;
case 5:return 35
break;
case 6:return 34
break;
case 7:return 36
break;
case 8:return 48
break;
case 9:return 49
break;
case 10:return 52
break;
case 11:return 56
break;
case 12:return 60
break;
case 13:return 59
break;
case 14:return 61
break;
case 15:return 68
break;
case 16:return 69
break;
case 17:return 26
break;
case 18:return 58
break;
case 19:return 13
break;
case 20:return 47
break;
case 21:return 85
break;
case 22:return 86
break;
case 23:return 30
break;
case 24:return 83
break;
case 25:return 'punto'
break;
case 26:return 84
break;
case 27:return 82       
break;
case 28:return 78
break;
case 29:return 76
break;
case 30:return 28
break;
case 31:return 77
break;
case 32:return 31
break;
case 33:return 29
break;
case 34:return 23
break;
case 35:return 8
break;
case 36:return 57
break;
case 37:return 80
break;
case 38:return 79
break;
case 39:return 17
break;
case 40:return 19
break;
case 41:return 72
break;
case 42:return 73
break;
case 43:return 67
break;
case 44:return 66   
break;
case 45:return 71
break;
case 46:return 70
break;
case 47:return 74
break;
case 48:return 81
break;
case 49:return 75
break;
case 50:return 15
break;
case 51:return 16
break;
case 52:return 'corchA'
break;
case 53:return 'corchC'
break;
case 54:return 14
break;
case 55:return 87
break;
case 56:return 88
break;
case 57:return 5
break;
case 58: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:do\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:default\b)/i,/^(?:void\b)/i,/^(?:print\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:main\b)/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:\.)/i,/^(?:[0-9]+\b)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:=)/i,/^(?:>)/i,/^(?:,)/i,/^(?:;)/i,/^(?::)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:--)/i,/^(?:\+\+)/i,/^(?:-)/i,/^(?:\+)/i,/^(?:\^)/i,/^(?:!)/i,/^(?:%)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:([a-zA-Z])([a-zA-Z0-9_])*)/i,/^(?:["\""]([^"\""])*["\""])/i,/^(?:["\'"]([^"\'"])*["\'"])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}